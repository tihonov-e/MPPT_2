
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080072c8  080072c8  000172c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007308  08007308  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007310  08007310  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007314  08007314  00017314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08007318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  20000038  08007350  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08007350  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019adf  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300e  00000000  00000000  00039b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  0003e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028308  00000000  00000000  0003f540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f39  00000000  00000000  00067848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108c9f  00000000  00000000  0007f781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00188420  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d34  00000000  00000000  00188474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000038 	.word	0x20000038
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080072b0 	.word	0x080072b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000003c 	.word	0x2000003c
 8000214:	080072b0 	.word	0x080072b0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000514:	f001 fa13 	bl	800193e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000518:	f000 f8f8 	bl	800070c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800051c:	f000 fdbe 	bl	800109c <MX_GPIO_Init>
	MX_ADC1_Init();
 8000520:	f000 f968 	bl	80007f4 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000524:	f000 f9de 	bl	80008e4 <MX_ADC2_Init>
	MX_ADC3_Init();
 8000528:	f000 fa42 	bl	80009b0 <MX_ADC3_Init>
	MX_ADC4_Init();
 800052c:	f000 fab8 	bl	8000aa0 <MX_ADC4_Init>
	MX_ADC5_Init();
 8000530:	f000 fb1c 	bl	8000b6c <MX_ADC5_Init>
	MX_COMP3_Init();
 8000534:	f000 fb80 	bl	8000c38 <MX_COMP3_Init>
	MX_COMP5_Init();
 8000538:	f000 fba4 	bl	8000c84 <MX_COMP5_Init>
	MX_COMP6_Init();
 800053c:	f000 fbc8 	bl	8000cd0 <MX_COMP6_Init>
	MX_DAC1_Init();
 8000540:	f000 fbec 	bl	8000d1c <MX_DAC1_Init>
	MX_DAC2_Init();
 8000544:	f000 fc30 	bl	8000da8 <MX_DAC2_Init>
	MX_DAC3_Init();
 8000548:	f000 fc68 	bl	8000e1c <MX_DAC3_Init>
	MX_DAC4_Init();
 800054c:	f000 fcac 	bl	8000ea8 <MX_DAC4_Init>
	MX_I2C4_Init();
 8000550:	f000 fcf0 	bl	8000f34 <MX_I2C4_Init>
	MX_USART1_UART_Init();
 8000554:	f000 fd2e 	bl	8000fb4 <MX_USART1_UART_Init>
	MX_USB_PCD_Init();
 8000558:	f000 fd78 	bl	800104c <MX_USB_PCD_Init>

	/* USER CODE BEGIN 2 */

	/*Turn on LED_Status*/
	HAL_GPIO_WritePin  ( GPIOB, LED_STATUS_Pin,  GPIO_PIN_SET  );
 800055c:	2201      	movs	r2, #1
 800055e:	2140      	movs	r1, #64	; 0x40
 8000560:	4863      	ldr	r0, [pc, #396]	; (80006f0 <main+0x1e0>)
 8000562:	f003 fb25 	bl	8003bb0 <HAL_GPIO_WritePin>


	/* Wait for User push-button press before starting the Communication */
	while (HAL_GPIO_ReadPin(GPIOB, BTN_USER_Pin) == GPIO_PIN_RESET) {
 8000566:	bf00      	nop
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	4861      	ldr	r0, [pc, #388]	; (80006f0 <main+0x1e0>)
 800056c:	f003 fb08 	bl	8003b80 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0f8      	beq.n	8000568 <main+0x58>
	}

	/* Wait for User push-button release before starting the Communication */
	while (HAL_GPIO_ReadPin(GPIOB, BTN_USER_Pin) == GPIO_PIN_SET) {
 8000576:	bf00      	nop
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	485d      	ldr	r0, [pc, #372]	; (80006f0 <main+0x1e0>)
 800057c:	f003 fb00 	bl	8003b80 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	2b01      	cmp	r3, #1
 8000584:	d0f8      	beq.n	8000578 <main+0x68>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		hTxNumData = TXBUFFERSIZE;
 8000586:	4b5b      	ldr	r3, [pc, #364]	; (80006f4 <main+0x1e4>)
 8000588:	2228      	movs	r2, #40	; 0x28
 800058a:	801a      	strh	r2, [r3, #0]
		hRxNumData = RXBUFFERSIZE;
 800058c:	4b5a      	ldr	r3, [pc, #360]	; (80006f8 <main+0x1e8>)
 800058e:	2228      	movs	r2, #40	; 0x28
 8000590:	801a      	strh	r2, [r3, #0]

		/* Update bTransferRequest to send buffer write request for Slave */
		bTransferRequest = MASTER_REQ_WRITE;
 8000592:	4b5a      	ldr	r3, [pc, #360]	; (80006fc <main+0x1ec>)
 8000594:	2234      	movs	r2, #52	; 0x34
 8000596:	701a      	strb	r2, [r3, #0]

		/*##-2- Master sends write request for slave #############################*/
		do {
			if (HAL_I2C_Master_Transmit_IT(&hi2c4, (uint16_t) I2C_ADDRESS,
 8000598:	2301      	movs	r3, #1
 800059a:	4a58      	ldr	r2, [pc, #352]	; (80006fc <main+0x1ec>)
 800059c:	2100      	movs	r1, #0
 800059e:	4858      	ldr	r0, [pc, #352]	; (8000700 <main+0x1f0>)
 80005a0:	f003 fbc8 	bl	8003d34 <HAL_I2C_Master_Transmit_IT>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <main+0x9e>
					(uint8_t*) &bTransferRequest, 1) != HAL_OK) {
				/* Error_Handler() function is called when error occurs. */
				Error_Handler();
 80005aa:	f000 fe89 	bl	80012c0 <Error_Handler>
			 state of the peripheral; if it’s busy you need to wait for the end of current
			 transfer before starting a new one.
			 For simplicity reasons, this example is just waiting till the end of the
			 transfer, but application may perform other tasks while transfer operation
			 is ongoing. */
			while (HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY) {}
 80005ae:	bf00      	nop
 80005b0:	4853      	ldr	r0, [pc, #332]	; (8000700 <main+0x1f0>)
 80005b2:	f003 fd07 	bl	8003fc4 <HAL_I2C_GetState>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b20      	cmp	r3, #32
 80005ba:	d1f9      	bne.n	80005b0 <main+0xa0>

			/* When Acknowledge failure occurs (Slave don't acknowledge it's address)
			 Master restarts communication */
		} while (HAL_I2C_GetError(&hi2c4) == HAL_I2C_ERROR_AF);
 80005bc:	4850      	ldr	r0, [pc, #320]	; (8000700 <main+0x1f0>)
 80005be:	f003 fd0f 	bl	8003fe0 <HAL_I2C_GetError>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d0e7      	beq.n	8000598 <main+0x88>

		/*##-3- Master sends number of data to be written ########################*/
		do {
			if (HAL_I2C_Master_Transmit_IT(&hi2c4, (uint16_t) I2C_ADDRESS,
 80005c8:	2302      	movs	r3, #2
 80005ca:	4a4a      	ldr	r2, [pc, #296]	; (80006f4 <main+0x1e4>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	484c      	ldr	r0, [pc, #304]	; (8000700 <main+0x1f0>)
 80005d0:	f003 fbb0 	bl	8003d34 <HAL_I2C_Master_Transmit_IT>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <main+0xce>
					(uint8_t*) &hTxNumData, 2) != HAL_OK) {
				/* Error_Handler() function is called when error occurs. */
				Error_Handler();
 80005da:	f000 fe71 	bl	80012c0 <Error_Handler>
			 state of the peripheral; if it’s busy you need to wait for the end of current
			 transfer before starting a new one.
			 For simplicity reasons, this example is just waiting till the end of the
			 transfer, but application may perform other tasks while transfer operation
			 is ongoing. */
			while (HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY) {
 80005de:	bf00      	nop
 80005e0:	4847      	ldr	r0, [pc, #284]	; (8000700 <main+0x1f0>)
 80005e2:	f003 fcef 	bl	8003fc4 <HAL_I2C_GetState>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b20      	cmp	r3, #32
 80005ea:	d1f9      	bne.n	80005e0 <main+0xd0>
			}

			/* When Acknowledge failure occurs (Slave don't acknowledge it's address)
			 Master restarts communication */
		} while (HAL_I2C_GetError(&hi2c4) == HAL_I2C_ERROR_AF);
 80005ec:	4844      	ldr	r0, [pc, #272]	; (8000700 <main+0x1f0>)
 80005ee:	f003 fcf7 	bl	8003fe0 <HAL_I2C_GetError>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	d0e7      	beq.n	80005c8 <main+0xb8>

		/*##-4- Master sends aTxBuffer to slave ##################################*/
	    do
	    {
	      if (HAL_I2C_Master_Transmit_IT(&hi2c4, (uint16_t)I2C_ADDRESS, (uint8_t *)aTxBuffer, TXBUFFERSIZE) != HAL_OK)
 80005f8:	2328      	movs	r3, #40	; 0x28
 80005fa:	4a42      	ldr	r2, [pc, #264]	; (8000704 <main+0x1f4>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	4840      	ldr	r0, [pc, #256]	; (8000700 <main+0x1f0>)
 8000600:	f003 fb98 	bl	8003d34 <HAL_I2C_Master_Transmit_IT>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <main+0xfe>
	      {
	        /* Error_Handler() function is called when error occurs. */
	        Error_Handler();
 800060a:	f000 fe59 	bl	80012c0 <Error_Handler>
	          state of the peripheral; if it’s busy you need to wait for the end of current
	          transfer before starting a new one.
	          For simplicity reasons, this example is just waiting till the end of the
	          transfer, but application may perform other tasks while transfer operation
	          is ongoing. */
	      while (HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY)
 800060e:	bf00      	nop
 8000610:	483b      	ldr	r0, [pc, #236]	; (8000700 <main+0x1f0>)
 8000612:	f003 fcd7 	bl	8003fc4 <HAL_I2C_GetState>
 8000616:	4603      	mov	r3, r0
 8000618:	2b20      	cmp	r3, #32
 800061a:	d1f9      	bne.n	8000610 <main+0x100>
	      }

	      /* When Acknowledge failure occurs (Slave don't acknowledge it's address)
	         Master restarts communication */
	    }
	    while (HAL_I2C_GetError(&hi2c4) == HAL_I2C_ERROR_AF);
 800061c:	4838      	ldr	r0, [pc, #224]	; (8000700 <main+0x1f0>)
 800061e:	f003 fcdf 	bl	8003fe0 <HAL_I2C_GetError>
 8000622:	4603      	mov	r3, r0
 8000624:	2b04      	cmp	r3, #4
 8000626:	d0e7      	beq.n	80005f8 <main+0xe8>

	    /* Update bTransferRequest to send buffer read request for Slave */
	    bTransferRequest = MASTER_REQ_READ;
 8000628:	4b34      	ldr	r3, [pc, #208]	; (80006fc <main+0x1ec>)
 800062a:	2212      	movs	r2, #18
 800062c:	701a      	strb	r2, [r3, #0]

	    /*##-5- Master sends read request for slave ##############################*/
	    do
	    {
	      if (HAL_I2C_Master_Transmit_IT(&hi2c4, (uint16_t)I2C_ADDRESS, (uint8_t *)&bTransferRequest, 1) != HAL_OK)
 800062e:	2301      	movs	r3, #1
 8000630:	4a32      	ldr	r2, [pc, #200]	; (80006fc <main+0x1ec>)
 8000632:	2100      	movs	r1, #0
 8000634:	4832      	ldr	r0, [pc, #200]	; (8000700 <main+0x1f0>)
 8000636:	f003 fb7d 	bl	8003d34 <HAL_I2C_Master_Transmit_IT>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <main+0x134>
	      {
	        /* Error_Handler() function is called when error occurs. */
	        Error_Handler();
 8000640:	f000 fe3e 	bl	80012c0 <Error_Handler>
	          state of the peripheral; if it’s busy you need to wait for the end of current
	          transfer before starting a new one.
	          For simplicity reasons, this example is just waiting till the end of the
	          transfer, but application may perform other tasks while transfer operation
	          is ongoing. */
	      while (HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY)
 8000644:	bf00      	nop
 8000646:	482e      	ldr	r0, [pc, #184]	; (8000700 <main+0x1f0>)
 8000648:	f003 fcbc 	bl	8003fc4 <HAL_I2C_GetState>
 800064c:	4603      	mov	r3, r0
 800064e:	2b20      	cmp	r3, #32
 8000650:	d1f9      	bne.n	8000646 <main+0x136>
	      }

	      /* When Acknowledge failure occurs (Slave don't acknowledge it's address)
	         Master restarts communication */
	    }
	    while (HAL_I2C_GetError(&hi2c4) == HAL_I2C_ERROR_AF);
 8000652:	482b      	ldr	r0, [pc, #172]	; (8000700 <main+0x1f0>)
 8000654:	f003 fcc4 	bl	8003fe0 <HAL_I2C_GetError>
 8000658:	4603      	mov	r3, r0
 800065a:	2b04      	cmp	r3, #4
 800065c:	d0e7      	beq.n	800062e <main+0x11e>

	    /*##-6- Master sends number of data to be read ###########################*/
	    do
	    {
	      if (HAL_I2C_Master_Transmit_IT(&hi2c4, (uint16_t)I2C_ADDRESS, (uint8_t *)&hRxNumData, 2) != HAL_OK)
 800065e:	2302      	movs	r3, #2
 8000660:	4a25      	ldr	r2, [pc, #148]	; (80006f8 <main+0x1e8>)
 8000662:	2100      	movs	r1, #0
 8000664:	4826      	ldr	r0, [pc, #152]	; (8000700 <main+0x1f0>)
 8000666:	f003 fb65 	bl	8003d34 <HAL_I2C_Master_Transmit_IT>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <main+0x164>
	      {
	        /* Error_Handler() function is called when error occurs. */
	        Error_Handler();
 8000670:	f000 fe26 	bl	80012c0 <Error_Handler>
	          state of the peripheral; if it’s busy you need to wait for the end of current
	          transfer before starting a new one.
	          For simplicity reasons, this example is just waiting till the end of the
	          transfer, but application may perform other tasks while transfer operation
	          is ongoing. */
	      while (HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY)
 8000674:	bf00      	nop
 8000676:	4822      	ldr	r0, [pc, #136]	; (8000700 <main+0x1f0>)
 8000678:	f003 fca4 	bl	8003fc4 <HAL_I2C_GetState>
 800067c:	4603      	mov	r3, r0
 800067e:	2b20      	cmp	r3, #32
 8000680:	d1f9      	bne.n	8000676 <main+0x166>
	      }

	      /* When Acknowledge failure occurs (Slave don't acknowledge it's address)
	         Master restarts communication */
	    }
	    while (HAL_I2C_GetError(&hi2c4) == HAL_I2C_ERROR_AF);
 8000682:	481f      	ldr	r0, [pc, #124]	; (8000700 <main+0x1f0>)
 8000684:	f003 fcac 	bl	8003fe0 <HAL_I2C_GetError>
 8000688:	4603      	mov	r3, r0
 800068a:	2b04      	cmp	r3, #4
 800068c:	d0e7      	beq.n	800065e <main+0x14e>

	    /*##-7- Master receives aRxBuffer from slave #############################*/
	    do
	    {
	      if (HAL_I2C_Master_Receive_IT(&hi2c4, (uint16_t)I2C_ADDRESS, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 800068e:	2328      	movs	r3, #40	; 0x28
 8000690:	4a1d      	ldr	r2, [pc, #116]	; (8000708 <main+0x1f8>)
 8000692:	2100      	movs	r1, #0
 8000694:	481a      	ldr	r0, [pc, #104]	; (8000700 <main+0x1f0>)
 8000696:	f003 fbbd 	bl	8003e14 <HAL_I2C_Master_Receive_IT>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <main+0x194>
	      {
	        /* Error_Handler() function is called when error occurs. */
	        Error_Handler();
 80006a0:	f000 fe0e 	bl	80012c0 <Error_Handler>
	          state of the peripheral; if it’s busy you need to wait for the end of current
	          transfer before starting a new one.
	          For simplicity reasons, this example is just waiting till the end of the
	          transfer, but application may perform other tasks while transfer operation
	          is ongoing. */
	      while (HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY)
 80006a4:	bf00      	nop
 80006a6:	4816      	ldr	r0, [pc, #88]	; (8000700 <main+0x1f0>)
 80006a8:	f003 fc8c 	bl	8003fc4 <HAL_I2C_GetState>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b20      	cmp	r3, #32
 80006b0:	d1f9      	bne.n	80006a6 <main+0x196>
	      }

	      /* When Acknowledge failure occurs (Slave don't acknowledge it's address)
	         Master restarts communication */
	    }
	    while (HAL_I2C_GetError(&hi2c4) == HAL_I2C_ERROR_AF);
 80006b2:	4813      	ldr	r0, [pc, #76]	; (8000700 <main+0x1f0>)
 80006b4:	f003 fc94 	bl	8003fe0 <HAL_I2C_GetError>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d0e7      	beq.n	800068e <main+0x17e>

	    /* Check correctness of received buffer ##################################*/
	    if (Buffercmp((uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, hRxNumData))
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <main+0x1e8>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	4910      	ldr	r1, [pc, #64]	; (8000708 <main+0x1f8>)
 80006c8:	480e      	ldr	r0, [pc, #56]	; (8000704 <main+0x1f4>)
 80006ca:	f000 fdbd 	bl	8001248 <Buffercmp>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <main+0x1c8>
	    {
	      /* Processing Error */
	      Error_Handler();
 80006d4:	f000 fdf4 	bl	80012c0 <Error_Handler>
	    }

	    /* Flush Rx buffers */
	    Flush_Buffer((uint8_t *)aRxBuffer, RXBUFFERSIZE);
 80006d8:	2128      	movs	r1, #40	; 0x28
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <main+0x1f8>)
 80006dc:	f000 fdd6 	bl	800128c <Flush_Buffer>

	    /* Toggle LED2 */
	    HAL_GPIO_TogglePin(GPIOB, LED_STATUS_Pin);
 80006e0:	2140      	movs	r1, #64	; 0x40
 80006e2:	4803      	ldr	r0, [pc, #12]	; (80006f0 <main+0x1e0>)
 80006e4:	f003 fa7c 	bl	8003be0 <HAL_GPIO_TogglePin>

	    /* This delay permits to see LED2 toggling */
	    HAL_Delay(25);
 80006e8:	2019      	movs	r0, #25
 80006ea:	f001 f999 	bl	8001a20 <HAL_Delay>
		hTxNumData = TXBUFFERSIZE;
 80006ee:	e74a      	b.n	8000586 <main+0x76>
 80006f0:	48000400 	.word	0x48000400
 80006f4:	20000054 	.word	0x20000054
 80006f8:	20000056 	.word	0x20000056
 80006fc:	20000058 	.word	0x20000058
 8000700:	20000078 	.word	0x20000078
 8000704:	20000000 	.word	0x20000000
 8000708:	20000384 	.word	0x20000384

0800070c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b0a8      	sub	sp, #160	; 0xa0
 8000710:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000712:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000716:	2238      	movs	r2, #56	; 0x38
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f006 fdc0 	bl	80072a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000720:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000730:	463b      	mov	r3, r7
 8000732:	2254      	movs	r2, #84	; 0x54
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f006 fdb2 	bl	80072a0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000740:	f004 ff72 	bl	8005628 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000754:	2303      	movs	r3, #3
 8000756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLN = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000778:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800077c:	4618      	mov	r0, r3
 800077e:	f005 f807 	bl	8005790 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x80>
		Error_Handler();
 8000788:	f000 fd9a 	bl	80012c0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	657b      	str	r3, [r7, #84]	; 0x54
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000790:	2302      	movs	r3, #2
 8000792:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 fb0a 	bl	8005dc0 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xaa>
		Error_Handler();
 80007b2:	f000 fd85 	bl	80012c0 <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <SystemClock_Config+0xe4>)
 80007b8:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_I2C4 | RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC12
			| RCC_PERIPHCLK_ADC345;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80007ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80007d4:	463b      	mov	r3, r7
 80007d6:	4618      	mov	r0, r3
 80007d8:	f005 fd0e 	bl	80061f8 <HAL_RCCEx_PeriphCLKConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xda>
		Error_Handler();
 80007e2:	f000 fd6d 	bl	80012c0 <Error_Handler>
	}
}
 80007e6:	bf00      	nop
 80007e8:	37a0      	adds	r7, #160	; 0xa0
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	0003a001 	.word	0x0003a001

080007f4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2220      	movs	r2, #32
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f006 fd47 	bl	80072a0 <memset>
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000814:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000818:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_ADC1_Init+0xe8>)
 800081c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000820:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000828:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_ADC1_Init+0xe8>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_ADC1_Init+0xe8>)
 800083c:	2204      	movs	r2, #4
 800083e:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000840:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_ADC1_Init+0xe8>)
 800084e:	2201      	movs	r2, #1
 8000850:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_ADC1_Init+0xe8>)
 800085c:	2200      	movs	r2, #0
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000862:	2200      	movs	r2, #0
 8000864:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000870:	2200      	movs	r2, #0
 8000872:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800087c:	4817      	ldr	r0, [pc, #92]	; (80008dc <MX_ADC1_Init+0xe8>)
 800087e:	f001 fac7 	bl	8001e10 <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x98>
		Error_Handler();
 8000888:	f000 fd1a 	bl	80012c0 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	4619      	mov	r1, r3
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <MX_ADC1_Init+0xe8>)
 8000898:	f002 f8de 	bl	8002a58 <HAL_ADCEx_MultiModeConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0xb2>
		Error_Handler();
 80008a2:	f000 fd0d 	bl	80012c0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_ADC1_Init+0xec>)
 80008a8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008aa:	2306      	movs	r3, #6
 80008ac:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b2:	237f      	movs	r3, #127	; 0x7f
 80008b4:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b6:	2304      	movs	r3, #4
 80008b8:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_ADC1_Init+0xe8>)
 80008c4:	f001 fc64 	bl	8002190 <HAL_ADC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0xde>
		Error_Handler();
 80008ce:	f000 fcf7 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3730      	adds	r7, #48	; 0x30
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200001fc 	.word	0x200001fc
 80008e0:	14f00020 	.word	0x14f00020

080008e4 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80008ea:	463b      	mov	r3, r7
 80008ec:	2220      	movs	r2, #32
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f006 fcd5 	bl	80072a0 <memset>
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Common config
	 */
	hadc2.Instance = ADC2;
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <MX_ADC2_Init+0xc0>)
 80008f8:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <MX_ADC2_Init+0xc4>)
 80008fa:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <MX_ADC2_Init+0xc0>)
 80008fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000902:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <MX_ADC2_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090a:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_ADC2_Init+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <MX_ADC2_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_ADC2_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_ADC2_Init+0xc0>)
 800091e:	2204      	movs	r2, #4
 8000920:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_ADC2_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_ADC2_Init+0xc0>)
 800092a:	2200      	movs	r2, #0
 800092c:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_ADC2_Init+0xc0>)
 8000930:	2201      	movs	r2, #1
 8000932:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_ADC2_Init+0xc0>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_ADC2_Init+0xc0>)
 800093e:	2200      	movs	r2, #0
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_ADC2_Init+0xc0>)
 8000944:	2200      	movs	r2, #0
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_ADC2_Init+0xc0>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_ADC2_Init+0xc0>)
 8000952:	2200      	movs	r2, #0
 8000954:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_ADC2_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <MX_ADC2_Init+0xc0>)
 8000960:	f001 fa56 	bl	8001e10 <HAL_ADC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC2_Init+0x8a>
		Error_Handler();
 800096a:	f000 fca9 	bl	80012c0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_ADC2_Init+0xc8>)
 8000970:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000972:	2306      	movs	r3, #6
 8000974:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800097a:	237f      	movs	r3, #127	; 0x7f
 800097c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800097e:	2304      	movs	r3, #4
 8000980:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_ADC2_Init+0xc0>)
 800098c:	f001 fc00 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC2_Init+0xb6>
		Error_Handler();
 8000996:	f000 fc93 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000ec 	.word	0x200000ec
 80009a8:	50000100 	.word	0x50000100
 80009ac:	3ef08000 	.word	0x3ef08000

080009b0 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2220      	movs	r2, #32
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f006 fc69 	bl	80072a0 <memset>
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Common config
	 */
	hadc3.Instance = ADC3;
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <MX_ADC3_Init+0xe4>)
 80009d0:	4a31      	ldr	r2, [pc, #196]	; (8000a98 <MX_ADC3_Init+0xe8>)
 80009d2:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <MX_ADC3_Init+0xe4>)
 80009d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009da:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <MX_ADC3_Init+0xe4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_ADC3_Init+0xe4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
	hadc3.Init.GainCompensation = 0;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <MX_ADC3_Init+0xe4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_ADC3_Init+0xe4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <MX_ADC3_Init+0xe4>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	619a      	str	r2, [r3, #24]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_ADC3_Init+0xe4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	771a      	strb	r2, [r3, #28]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	775a      	strb	r2, [r3, #29]
	hadc3.Init.NbrOfConversion = 1;
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	621a      	str	r2, [r3, #32]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.OversamplingMode = DISABLE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000a36:	4817      	ldr	r0, [pc, #92]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a38:	f001 f9ea 	bl	8001e10 <HAL_ADC_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC3_Init+0x96>
		Error_Handler();
 8000a42:	f000 fc3d 	bl	80012c0 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK) {
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4810      	ldr	r0, [pc, #64]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a52:	f002 f801 	bl	8002a58 <HAL_ADCEx_MultiModeConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC3_Init+0xb0>
		Error_Handler();
 8000a5c:	f000 fc30 	bl	80012c0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_ADC3_Init+0xec>)
 8000a62:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a64:	2306      	movs	r3, #6
 8000a66:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a6c:	237f      	movs	r3, #127	; 0x7f
 8000a6e:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a70:	2304      	movs	r3, #4
 8000a72:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_ADC3_Init+0xe4>)
 8000a7e:	f001 fb87 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC3_Init+0xdc>
		Error_Handler();
 8000a88:	f000 fc1a 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000268 	.word	0x20000268
 8000a98:	50000400 	.word	0x50000400
 8000a9c:	32601000 	.word	0x32601000

08000aa0 <MX_ADC4_Init>:
/**
 * @brief ADC4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC4_Init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC4_Init 0 */

	/* USER CODE END ADC4_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f006 fbf7 	bl	80072a0 <memset>
	/* USER CODE BEGIN ADC4_Init 1 */

	/* USER CODE END ADC4_Init 1 */
	/** Common config
	 */
	hadc4.Instance = ADC4;
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000ab4:	4a2b      	ldr	r2, [pc, #172]	; (8000b64 <MX_ADC4_Init+0xc4>)
 8000ab6:	601a      	str	r2, [r3, #0]
	hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000aba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000abe:	605a      	str	r2, [r3, #4]
	hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
	hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
	hadc4.Init.GainCompensation = 0;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
	hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
	hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	619a      	str	r2, [r3, #24]
	hadc4.Init.LowPowerAutoWait = DISABLE;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	771a      	strb	r2, [r3, #28]
	hadc4.Init.ContinuousConvMode = DISABLE;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	775a      	strb	r2, [r3, #29]
	hadc4.Init.NbrOfConversion = 1;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	621a      	str	r2, [r3, #32]
	hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
	hadc4.Init.DMAContinuousRequests = DISABLE;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc4.Init.OversamplingMode = DISABLE;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc4) != HAL_OK) {
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000b1c:	f001 f978 	bl	8001e10 <HAL_ADC_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC4_Init+0x8a>
		Error_Handler();
 8000b26:	f000 fbcb 	bl	80012c0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_ADC4_Init+0xc8>)
 8000b2c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2e:	2306      	movs	r3, #6
 8000b30:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b36:	237f      	movs	r3, #127	; 0x7f
 8000b38:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK) {
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_ADC4_Init+0xc0>)
 8000b48:	f001 fb22 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC4_Init+0xb6>
		Error_Handler();
 8000b52:	f000 fbb5 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC4_Init 2 */

	/* USER CODE END ADC4_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200003ac 	.word	0x200003ac
 8000b64:	50000500 	.word	0x50000500
 8000b68:	0c900008 	.word	0x0c900008

08000b6c <MX_ADC5_Init>:
/**
 * @brief ADC5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC5_Init(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC5_Init 0 */

	/* USER CODE END ADC5_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000b72:	463b      	mov	r3, r7
 8000b74:	2220      	movs	r2, #32
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f006 fb91 	bl	80072a0 <memset>
	/* USER CODE BEGIN ADC5_Init 1 */

	/* USER CODE END ADC5_Init 1 */
	/** Common config
	 */
	hadc5.Instance = ADC5;
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000b80:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <MX_ADC5_Init+0xc4>)
 8000b82:	601a      	str	r2, [r3, #0]
	hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b84:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b8a:	605a      	str	r2, [r3, #4]
	hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
	hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b92:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
	hadc5.Init.GainCompensation = 0;
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
	hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
	hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	619a      	str	r2, [r3, #24]
	hadc5.Init.LowPowerAutoWait = DISABLE;
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	771a      	strb	r2, [r3, #28]
	hadc5.Init.ContinuousConvMode = DISABLE;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	775a      	strb	r2, [r3, #29]
	hadc5.Init.NbrOfConversion = 1;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	621a      	str	r2, [r3, #32]
	hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	631a      	str	r2, [r3, #48]	; 0x30
	hadc5.Init.DMAContinuousRequests = DISABLE;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc5.Init.OversamplingMode = DISABLE;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc5) != HAL_OK) {
 8000be6:	4811      	ldr	r0, [pc, #68]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000be8:	f001 f912 	bl	8001e10 <HAL_ADC_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC5_Init+0x8a>
		Error_Handler();
 8000bf2:	f000 fb65 	bl	80012c0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_ADC5_Init+0xc8>)
 8000bf8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c02:	237f      	movs	r3, #127	; 0x7f
 8000c04:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c06:	2304      	movs	r3, #4
 8000c08:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK) {
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_ADC5_Init+0xc0>)
 8000c14:	f001 fabc 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC5_Init+0xb6>
		Error_Handler();
 8000c1e:	f000 fb4f 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC5_Init 2 */

	/* USER CODE END ADC5_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000158 	.word	0x20000158
 8000c30:	50000600 	.word	0x50000600
 8000c34:	04300002 	.word	0x04300002

08000c38 <MX_COMP3_Init>:
/**
 * @brief COMP3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP3_Init(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	/* USER CODE END COMP3_Init 0 */

	/* USER CODE BEGIN COMP3_Init 1 */

	/* USER CODE END COMP3_Init 1 */
	hcomp3.Instance = COMP3;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_COMP3_Init+0x44>)
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <MX_COMP3_Init+0x48>)
 8000c40:	601a      	str	r2, [r3, #0]
	hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_COMP3_Init+0x44>)
 8000c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c48:	605a      	str	r2, [r3, #4]
	hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_COMP3_Init+0x44>)
 8000c4c:	2240      	movs	r2, #64	; 0x40
 8000c4e:	609a      	str	r2, [r3, #8]
	hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_COMP3_Init+0x44>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
	hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_COMP3_Init+0x44>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
	hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_COMP3_Init+0x44>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
	hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_COMP3_Init+0x44>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
	if (HAL_COMP_Init(&hcomp3) != HAL_OK) {
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_COMP3_Init+0x44>)
 8000c6a:	f002 f949 	bl	8002f00 <HAL_COMP_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_COMP3_Init+0x40>
		Error_Handler();
 8000c74:	f000 fb24 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN COMP3_Init 2 */

	/* USER CODE END COMP3_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000360 	.word	0x20000360
 8000c80:	40010208 	.word	0x40010208

08000c84 <MX_COMP5_Init>:
/**
 * @brief COMP5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP5_Init(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	/* USER CODE END COMP5_Init 0 */

	/* USER CODE BEGIN COMP5_Init 1 */

	/* USER CODE END COMP5_Init 1 */
	hcomp5.Instance = COMP5;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_COMP5_Init+0x44>)
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <MX_COMP5_Init+0x48>)
 8000c8c:	601a      	str	r2, [r3, #0]
	hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_COMP5_Init+0x44>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
	hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_COMP5_Init+0x44>)
 8000c96:	2240      	movs	r2, #64	; 0x40
 8000c98:	609a      	str	r2, [r3, #8]
	hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_COMP5_Init+0x44>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
	hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_COMP5_Init+0x44>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
	hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_COMP5_Init+0x44>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
	hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_COMP5_Init+0x44>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
	if (HAL_COMP_Init(&hcomp5) != HAL_OK) {
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_COMP5_Init+0x44>)
 8000cb4:	f002 f924 	bl	8002f00 <HAL_COMP_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_COMP5_Init+0x3e>
		Error_Handler();
 8000cbe:	f000 faff 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN COMP5_Init 2 */

	/* USER CODE END COMP5_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000418 	.word	0x20000418
 8000ccc:	40010210 	.word	0x40010210

08000cd0 <MX_COMP6_Init>:
/**
 * @brief COMP6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP6_Init(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	/* USER CODE END COMP6_Init 0 */

	/* USER CODE BEGIN COMP6_Init 1 */

	/* USER CODE END COMP6_Init 1 */
	hcomp6.Instance = COMP6;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_COMP6_Init+0x44>)
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <MX_COMP6_Init+0x48>)
 8000cd8:	601a      	str	r2, [r3, #0]
	hcomp6.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_COMP6_Init+0x44>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
	hcomp6.Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_COMP6_Init+0x44>)
 8000ce2:	2250      	movs	r2, #80	; 0x50
 8000ce4:	609a      	str	r2, [r3, #8]
	hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_COMP6_Init+0x44>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
	hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_COMP6_Init+0x44>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
	hcomp6.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_COMP6_Init+0x44>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
	hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_COMP6_Init+0x44>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
	if (HAL_COMP_Init(&hcomp6) != HAL_OK) {
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_COMP6_Init+0x44>)
 8000d00:	f002 f8fe 	bl	8002f00 <HAL_COMP_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_COMP6_Init+0x3e>
		Error_Handler();
 8000d0a:	f000 fad9 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN COMP6_Init 2 */

	/* USER CODE END COMP6_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001c4 	.word	0x200001c4
 8000d18:	40010214 	.word	0x40010214

08000d1c <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000d22:	463b      	mov	r3, r7
 8000d24:	2230      	movs	r2, #48	; 0x30
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f006 fab9 	bl	80072a0 <memset>
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_DAC1_Init+0x84>)
 8000d30:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <MX_DAC1_Init+0x88>)
 8000d32:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8000d34:	481a      	ldr	r0, [pc, #104]	; (8000da0 <MX_DAC1_Init+0x84>)
 8000d36:	f002 fb5a 	bl	80033ee <HAL_DAC_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_DAC1_Init+0x28>
		Error_Handler();
 8000d40:	f000 fabe 	bl	80012c0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d44:	2302      	movs	r3, #2
 8000d46:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_DAC1_Init+0x84>)
 8000d70:	f002 fb60 	bl	8003434 <HAL_DAC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_DAC1_Init+0x62>
		Error_Handler();
 8000d7a:	f000 faa1 	bl	80012c0 <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8000d82:	463b      	mov	r3, r7
 8000d84:	2210      	movs	r2, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_DAC1_Init+0x84>)
 8000d8a:	f002 fb53 	bl	8003434 <HAL_DAC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_DAC1_Init+0x7c>
		Error_Handler();
 8000d94:	f000 fa94 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3730      	adds	r7, #48	; 0x30
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200000d8 	.word	0x200000d8
 8000da4:	50000800 	.word	0x50000800

08000da8 <MX_DAC2_Init>:
/**
 * @brief DAC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC2_Init(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC2_Init 0 */

	/* USER CODE END DAC2_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000dae:	463b      	mov	r3, r7
 8000db0:	2230      	movs	r2, #48	; 0x30
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 fa73 	bl	80072a0 <memset>
	/* USER CODE BEGIN DAC2_Init 1 */

	/* USER CODE END DAC2_Init 1 */
	/** DAC Initialization
	 */
	hdac2.Instance = DAC2;
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <MX_DAC2_Init+0x6c>)
 8000dbc:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <MX_DAC2_Init+0x70>)
 8000dbe:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac2) != HAL_OK) {
 8000dc0:	4814      	ldr	r0, [pc, #80]	; (8000e14 <MX_DAC2_Init+0x6c>)
 8000dc2:	f002 fb14 	bl	80033ee <HAL_DAC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_DAC2_Init+0x28>
		Error_Handler();
 8000dcc:	f000 fa78 	bl	80012c0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000de8:	2302      	movs	r3, #2
 8000dea:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <MX_DAC2_Init+0x6c>)
 8000dfc:	f002 fb1a 	bl	8003434 <HAL_DAC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_DAC2_Init+0x62>
		Error_Handler();
 8000e06:	f000 fa5b 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC2_Init 2 */

	/* USER CODE END DAC2_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	3730      	adds	r7, #48	; 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000064 	.word	0x20000064
 8000e18:	50000c00 	.word	0x50000c00

08000e1c <MX_DAC3_Init>:
/**
 * @brief DAC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC3_Init(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC3_Init 0 */

	/* USER CODE END DAC3_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000e22:	463b      	mov	r3, r7
 8000e24:	2230      	movs	r2, #48	; 0x30
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 fa39 	bl	80072a0 <memset>
	/* USER CODE BEGIN DAC3_Init 1 */

	/* USER CODE END DAC3_Init 1 */
	/** DAC Initialization
	 */
	hdac3.Instance = DAC3;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_DAC3_Init+0x84>)
 8000e30:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <MX_DAC3_Init+0x88>)
 8000e32:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac3) != HAL_OK) {
 8000e34:	481a      	ldr	r0, [pc, #104]	; (8000ea0 <MX_DAC3_Init+0x84>)
 8000e36:	f002 fada 	bl	80033ee <HAL_DAC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_DAC3_Init+0x28>
		Error_Handler();
 8000e40:	f000 fa3e 	bl	80012c0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000e44:	2302      	movs	r3, #2
 8000e46:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <MX_DAC3_Init+0x84>)
 8000e70:	f002 fae0 	bl	8003434 <HAL_DAC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_DAC3_Init+0x62>
		Error_Handler();
 8000e7a:	f000 fa21 	bl	80012c0 <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
	if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8000e82:	463b      	mov	r3, r7
 8000e84:	2210      	movs	r2, #16
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_DAC3_Init+0x84>)
 8000e8a:	f002 fad3 	bl	8003434 <HAL_DAC_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_DAC3_Init+0x7c>
		Error_Handler();
 8000e94:	f000 fa14 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC3_Init 2 */

	/* USER CODE END DAC3_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3730      	adds	r7, #48	; 0x30
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000c4 	.word	0x200000c4
 8000ea4:	50001000 	.word	0x50001000

08000ea8 <MX_DAC4_Init>:
/**
 * @brief DAC4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC4_Init(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC4_Init 0 */

	/* USER CODE END DAC4_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2230      	movs	r2, #48	; 0x30
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f006 f9f3 	bl	80072a0 <memset>
	/* USER CODE BEGIN DAC4_Init 1 */

	/* USER CODE END DAC4_Init 1 */
	/** DAC Initialization
	 */
	hdac4.Instance = DAC4;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_DAC4_Init+0x84>)
 8000ebc:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <MX_DAC4_Init+0x88>)
 8000ebe:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac4) != HAL_OK) {
 8000ec0:	481a      	ldr	r0, [pc, #104]	; (8000f2c <MX_DAC4_Init+0x84>)
 8000ec2:	f002 fa94 	bl	80033ee <HAL_DAC_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_DAC4_Init+0x28>
		Error_Handler();
 8000ecc:	f000 f9f8 	bl	80012c0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_DAC4_Init+0x84>)
 8000efc:	f002 fa9a 	bl	8003434 <HAL_DAC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_DAC4_Init+0x62>
		Error_Handler();
 8000f06:	f000 f9db 	bl	80012c0 <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
	if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2210      	movs	r2, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_DAC4_Init+0x84>)
 8000f16:	f002 fa8d 	bl	8003434 <HAL_DAC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_DAC4_Init+0x7c>
		Error_Handler();
 8000f20:	f000 f9ce 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC4_Init 2 */

	/* USER CODE END DAC4_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3730      	adds	r7, #48	; 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200001e8 	.word	0x200001e8
 8000f30:	50001400 	.word	0x50001400

08000f34 <MX_I2C4_Init>:
/**
 * @brief I2C4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C4_Init(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	/* USER CODE END I2C4_Init 0 */

	/* USER CODE BEGIN I2C4_Init 1 */

	/* USER CODE END I2C4_Init 1 */
	hi2c4.Instance = I2C4;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <MX_I2C4_Init+0x78>)
 8000f3c:	601a      	str	r2, [r3, #0]
	hi2c4.Init.Timing = 0x00506682; //100 kHz
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <MX_I2C4_Init+0x7c>)
 8000f42:	605a      	str	r2, [r3, #4]
	hi2c4.Init.OwnAddress1 = 0;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	60da      	str	r2, [r3, #12]
	hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
	hi2c4.Init.OwnAddress2 = 0;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
	hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f70:	f002 fe50 	bl	8003c14 <HAL_I2C_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_I2C4_Init+0x4a>
		Error_Handler();
 8000f7a:	f000 f9a1 	bl	80012c0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f82:	f004 f9ab 	bl	80052dc <HAL_I2CEx_ConfigAnalogFilter>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C4_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000f8c:	f000 f998 	bl	80012c0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8000f90:	2100      	movs	r1, #0
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f94:	f004 f9ed 	bl	8005372 <HAL_I2CEx_ConfigDigitalFilter>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_I2C4_Init+0x6e>
		Error_Handler();
 8000f9e:	f000 f98f 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C4_Init 2 */

	/* USER CODE END I2C4_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000078 	.word	0x20000078
 8000fac:	40008400 	.word	0x40008400
 8000fb0:	00506682 	.word	0x00506682

08000fb4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000fba:	4a23      	ldr	r2, [pc, #140]	; (8001048 <MX_USART1_UART_Init+0x94>)
 8000fbc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000ffc:	4811      	ldr	r0, [pc, #68]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8000ffe:	f005 fb47 	bl	8006690 <HAL_UART_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001008:	f000 f95a 	bl	80012c0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 800100c:	2100      	movs	r1, #0
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8001010:	f006 f801 	bl	8007016 <HAL_UARTEx_SetTxFifoThreshold>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800101a:	f000 f951 	bl	80012c0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800101e:	2100      	movs	r1, #0
 8001020:	4808      	ldr	r0, [pc, #32]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8001022:	f006 f836 	bl	8007092 <HAL_UARTEx_SetRxFifoThreshold>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800102c:	f000 f948 	bl	80012c0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <MX_USART1_UART_Init+0x90>)
 8001032:	f005 ffb7 	bl	8006fa4 <HAL_UARTEx_DisableFifoMode>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 800103c:	f000 f940 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200002d4 	.word	0x200002d4
 8001048:	40013800 	.word	0x40013800

0800104c <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_USB_PCD_Init+0x48>)
 8001052:	4a11      	ldr	r2, [pc, #68]	; (8001098 <MX_USB_PCD_Init+0x4c>)
 8001054:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_USB_PCD_Init+0x48>)
 8001058:	2208      	movs	r2, #8
 800105a:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <MX_USB_PCD_Init+0x48>)
 800105e:	2202      	movs	r2, #2
 8001060:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_USB_PCD_Init+0x48>)
 8001064:	2202      	movs	r2, #2
 8001066:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_USB_PCD_Init+0x48>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_USB_PCD_Init+0x48>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_USB_PCD_Init+0x48>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_USB_PCD_Init+0x48>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_USB_PCD_Init+0x48>)
 8001082:	f004 f9c2 	bl	800540a <HAL_PCD_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_USB_PCD_Init+0x44>
		Error_Handler();
 800108c:	f000 f918 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000043c 	.word	0x2000043c
 8001098:	40005c00 	.word	0x40005c00

0800109c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4b61      	ldr	r3, [pc, #388]	; (8001238 <MX_GPIO_Init+0x19c>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a60      	ldr	r2, [pc, #384]	; (8001238 <MX_GPIO_Init+0x19c>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b5e      	ldr	r3, [pc, #376]	; (8001238 <MX_GPIO_Init+0x19c>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80010ca:	4b5b      	ldr	r3, [pc, #364]	; (8001238 <MX_GPIO_Init+0x19c>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a5a      	ldr	r2, [pc, #360]	; (8001238 <MX_GPIO_Init+0x19c>)
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b58      	ldr	r3, [pc, #352]	; (8001238 <MX_GPIO_Init+0x19c>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b55      	ldr	r3, [pc, #340]	; (8001238 <MX_GPIO_Init+0x19c>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a54      	ldr	r2, [pc, #336]	; (8001238 <MX_GPIO_Init+0x19c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b52      	ldr	r3, [pc, #328]	; (8001238 <MX_GPIO_Init+0x19c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b4f      	ldr	r3, [pc, #316]	; (8001238 <MX_GPIO_Init+0x19c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a4e      	ldr	r2, [pc, #312]	; (8001238 <MX_GPIO_Init+0x19c>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <MX_GPIO_Init+0x19c>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b49      	ldr	r3, [pc, #292]	; (8001238 <MX_GPIO_Init+0x19c>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a48      	ldr	r2, [pc, #288]	; (8001238 <MX_GPIO_Init+0x19c>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <MX_GPIO_Init+0x19c>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800112a:	2200      	movs	r2, #0
 800112c:	f248 4105 	movw	r1, #33797	; 0x8405
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f002 fd3c 	bl	8003bb0 <HAL_GPIO_WritePin>
			nHOLD_FLASH_Pin | RS_TFT_Pin | FAN_Pin | HINPWM_BUCK_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001138:	2200      	movs	r2, #0
 800113a:	f240 2166 	movw	r1, #614	; 0x266
 800113e:	483f      	ldr	r0, [pc, #252]	; (800123c <MX_GPIO_Init+0x1a0>)
 8001140:	f002 fd36 	bl	8003bb0 <HAL_GPIO_WritePin>
			LINPWM_BOOST_Pin | SPI_CS_FLASH_Pin | LED_STATUS_Pin | USER_LED_Pin
					| CAN_TX_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, HINPWM_BOOST_Pin | LINPWM_BUCK_Pin,
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800114a:	483d      	ldr	r0, [pc, #244]	; (8001240 <MX_GPIO_Init+0x1a4>)
 800114c:	f002 fd30 	bl	8003bb0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : NC_Pin NCC0_Pin NCC2_Pin NCC3_Pin
	 NCC9_Pin NCC11_Pin NCC12_Pin */
	GPIO_InitStruct.Pin = NC_Pin | NCC0_Pin | NCC2_Pin | NCC3_Pin | NCC9_Pin
 8001150:	f643 230d 	movw	r3, #14861	; 0x3a0d
 8001154:	617b      	str	r3, [r7, #20]
			| NCC11_Pin | NCC12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800115a:	2302      	movs	r3, #2
 800115c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4836      	ldr	r0, [pc, #216]	; (8001240 <MX_GPIO_Init+0x1a4>)
 8001166:	f002 fb89 	bl	800387c <HAL_GPIO_Init>

	/*Configure GPIO pins : nHOLD_FLASH_Pin RS_TFT_Pin FAN_Pin HINPWM_BUCK_Pin */
	GPIO_InitStruct.Pin = nHOLD_FLASH_Pin | RS_TFT_Pin | FAN_Pin
 800116a:	f248 4305 	movw	r3, #33797	; 0x8405
 800116e:	617b      	str	r3, [r7, #20]
			| HINPWM_BUCK_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001186:	f002 fb79 	bl	800387c <HAL_GPIO_Init>

	/*Configure GPIO pins : NCA1_Pin TE_TFT_Pin NCA4_Pin NCA5_Pin
	 NCA6_Pin NCA7_Pin */
	GPIO_InitStruct.Pin = NCA1_Pin | TE_TFT_Pin | NCA4_Pin | NCA5_Pin | NCA6_Pin
 800118a:	23fa      	movs	r3, #250	; 0xfa
 800118c:	617b      	str	r3, [r7, #20]
			| NCA7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001192:	2302      	movs	r3, #2
 8001194:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f002 fb6c 	bl	800387c <HAL_GPIO_Init>

	/*Configure GPIO pins : LINPWM_BOOST_Pin SPI_CS_FLASH_Pin LED_STATUS_Pin USER_LED_Pin
	 CAN_TX_Pin */
	GPIO_InitStruct.Pin = LINPWM_BOOST_Pin | SPI_CS_FLASH_Pin | LED_STATUS_Pin
 80011a4:	f240 2366 	movw	r3, #614	; 0x266
 80011a8:	617b      	str	r3, [r7, #20]
			| USER_LED_Pin | CAN_TX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	481f      	ldr	r0, [pc, #124]	; (800123c <MX_GPIO_Init+0x1a0>)
 80011be:	f002 fb5d 	bl	800387c <HAL_GPIO_Init>

	/*Configure GPIO pins : USER_LED_Pin   */
	GPIO_InitStruct.Pin = USER_LED_Pin;
 80011c2:	2320      	movs	r3, #32
 80011c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4818      	ldr	r0, [pc, #96]	; (800123c <MX_GPIO_Init+0x1a0>)
 80011da:	f002 fb4f 	bl	800387c <HAL_GPIO_Init>

	/*Configure GPIO pins : NCB10_Pin NCB4_Pin BTN_USER_Pin BOOT0_Pin */
	GPIO_InitStruct.Pin = NCB10_Pin | NCB4_Pin | BTN_USER_Pin | BOOT0_Pin;
 80011de:	f44f 63b2 	mov.w	r3, #1424	; 0x590
 80011e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_GPIO_Init+0x1a0>)
 80011f4:	f002 fb42 	bl	800387c <HAL_GPIO_Init>

	/*Configure GPIO pins : HINPWM_BOOST_Pin LINPWM_BUCK_Pin */
	GPIO_InitStruct.Pin = HINPWM_BOOST_Pin | LINPWM_BUCK_Pin;
 80011f8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <MX_GPIO_Init+0x1a4>)
 8001212:	f002 fb33 	bl	800387c <HAL_GPIO_Init>

	/*Configure GPIO pin : NCD2_Pin */
	GPIO_InitStruct.Pin = NCD2_Pin;
 8001216:	2304      	movs	r3, #4
 8001218:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800121e:	2302      	movs	r3, #2
 8001220:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(NCD2_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <MX_GPIO_Init+0x1a8>)
 800122a:	f002 fb27 	bl	800387c <HAL_GPIO_Init>

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400
 8001240:	48000800 	.word	0x48000800
 8001244:	48000c00 	.word	0x48000c00

08001248 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t *pBuffer1, uint8_t *pBuffer2, uint16_t BufferLength)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8001256:	e00d      	b.n	8001274 <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <Buffercmp+0x20>
    {
      return BufferLength;
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	e00b      	b.n	8001280 <Buffercmp+0x38>
    }
    pBuffer1++;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3301      	adds	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3301      	adds	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	80fa      	strh	r2, [r7, #6]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1ec      	bne.n	8001258 <Buffercmp+0x10>
  }

  return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <Flush_Buffer>:
  * @param  pBuffer: buffers to be flushed.
  * @param  BufferLength: buffer's length
  * @retval None
  */
static void Flush_Buffer(uint8_t *pBuffer, uint16_t BufferLength)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
  while (BufferLength--)
 8001298:	e005      	b.n	80012a6 <Flush_Buffer+0x1a>
  {
    *pBuffer = 0;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]

    pBuffer++;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
  while (BufferLength--)
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	807a      	strh	r2, [r7, #2]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f4      	bne.n	800129a <Flush_Buffer+0xe>
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* Error if LED_STATUS is slowly blinking (1 sec. period) */
	while (1) {
		HAL_GPIO_TogglePin(GPIOB,LED_STATUS_Pin);
 80012c4:	2140      	movs	r1, #64	; 0x40
 80012c6:	4804      	ldr	r0, [pc, #16]	; (80012d8 <Error_Handler+0x18>)
 80012c8:	f002 fc8a 	bl	8003be0 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80012cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d0:	f000 fba6 	bl	8001a20 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,LED_STATUS_Pin);
 80012d4:	e7f6      	b.n	80012c4 <Error_Handler+0x4>
 80012d6:	bf00      	nop
 80012d8:	48000400 	.word	0x48000400

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_MspInit+0x44>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_MspInit+0x44>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6613      	str	r3, [r2, #96]	; 0x60
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_MspInit+0x44>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_MspInit+0x44>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_MspInit+0x44>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6593      	str	r3, [r2, #88]	; 0x58
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_MspInit+0x44>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001312:	f004 fa2d 	bl	8005770 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b092      	sub	sp, #72	; 0x48
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001344:	d12e      	bne.n	80013a4 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001346:	4b81      	ldr	r3, [pc, #516]	; (800154c <HAL_ADC_MspInit+0x228>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	4a7f      	ldr	r2, [pc, #508]	; (800154c <HAL_ADC_MspInit+0x228>)
 800134e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001350:	4b7e      	ldr	r3, [pc, #504]	; (800154c <HAL_ADC_MspInit+0x228>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d10b      	bne.n	8001370 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001358:	4b7d      	ldr	r3, [pc, #500]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	4a7c      	ldr	r2, [pc, #496]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 800135e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001364:	4b7a      	ldr	r3, [pc, #488]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
 800136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	4b77      	ldr	r3, [pc, #476]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	4a76      	ldr	r2, [pc, #472]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137c:	4b74      	ldr	r3, [pc, #464]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**ADC1 GPIO Configuration
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = I_OUTPUTB14_Pin;
 8001388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138e:	2303      	movs	r3, #3
 8001390:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I_OUTPUTB14_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800139a:	4619      	mov	r1, r3
 800139c:	486d      	ldr	r0, [pc, #436]	; (8001554 <HAL_ADC_MspInit+0x230>)
 800139e:	f002 fa6d 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80013a2:	e0ce      	b.n	8001542 <HAL_ADC_MspInit+0x21e>
  else if(hadc->Instance==ADC2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a6b      	ldr	r2, [pc, #428]	; (8001558 <HAL_ADC_MspInit+0x234>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12e      	bne.n	800140c <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ae:	4b67      	ldr	r3, [pc, #412]	; (800154c <HAL_ADC_MspInit+0x228>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a65      	ldr	r2, [pc, #404]	; (800154c <HAL_ADC_MspInit+0x228>)
 80013b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013b8:	4b64      	ldr	r3, [pc, #400]	; (800154c <HAL_ADC_MspInit+0x228>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d10b      	bne.n	80013d8 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013c0:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	4a62      	ldr	r2, [pc, #392]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80013c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013cc:	4b60      	ldr	r3, [pc, #384]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013dc:	4a5c      	ldr	r2, [pc, #368]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e4:	4b5a      	ldr	r3, [pc, #360]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = I_EXT_Pin;
 80013f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f6:	2303      	movs	r3, #3
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I_EXT_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001402:	4619      	mov	r1, r3
 8001404:	4853      	ldr	r0, [pc, #332]	; (8001554 <HAL_ADC_MspInit+0x230>)
 8001406:	f002 fa39 	bl	800387c <HAL_GPIO_Init>
}
 800140a:	e09a      	b.n	8001542 <HAL_ADC_MspInit+0x21e>
  else if(hadc->Instance==ADC3)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a52      	ldr	r2, [pc, #328]	; (800155c <HAL_ADC_MspInit+0x238>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d12d      	bne.n	8001472 <HAL_ADC_MspInit+0x14e>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001416:	4b52      	ldr	r3, [pc, #328]	; (8001560 <HAL_ADC_MspInit+0x23c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a50      	ldr	r2, [pc, #320]	; (8001560 <HAL_ADC_MspInit+0x23c>)
 800141e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001420:	4b4f      	ldr	r3, [pc, #316]	; (8001560 <HAL_ADC_MspInit+0x23c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d10b      	bne.n	8001440 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001428:	4b49      	ldr	r3, [pc, #292]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	4a48      	ldr	r2, [pc, #288]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 800142e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001434:	4b46      	ldr	r3, [pc, #280]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143c:	623b      	str	r3, [r7, #32]
 800143e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b43      	ldr	r3, [pc, #268]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	4a42      	ldr	r2, [pc, #264]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PCB_TEMP_Pin;
 8001458:	2301      	movs	r3, #1
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145c:	2303      	movs	r3, #3
 800145e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(PCB_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001468:	4619      	mov	r1, r3
 800146a:	483a      	ldr	r0, [pc, #232]	; (8001554 <HAL_ADC_MspInit+0x230>)
 800146c:	f002 fa06 	bl	800387c <HAL_GPIO_Init>
}
 8001470:	e067      	b.n	8001542 <HAL_ADC_MspInit+0x21e>
  else if(hadc->Instance==ADC4)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a3b      	ldr	r2, [pc, #236]	; (8001564 <HAL_ADC_MspInit+0x240>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d12e      	bne.n	80014da <HAL_ADC_MspInit+0x1b6>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_ADC_MspInit+0x23c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	4a37      	ldr	r2, [pc, #220]	; (8001560 <HAL_ADC_MspInit+0x23c>)
 8001484:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001486:	4b36      	ldr	r3, [pc, #216]	; (8001560 <HAL_ADC_MspInit+0x23c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10b      	bne.n	80014a6 <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a2f      	ldr	r2, [pc, #188]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a29      	ldr	r2, [pc, #164]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = I_INPUTB12_Pin;
 80014be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c4:	2303      	movs	r3, #3
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I_INPUTB12_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014d0:	4619      	mov	r1, r3
 80014d2:	4820      	ldr	r0, [pc, #128]	; (8001554 <HAL_ADC_MspInit+0x230>)
 80014d4:	f002 f9d2 	bl	800387c <HAL_GPIO_Init>
}
 80014d8:	e033      	b.n	8001542 <HAL_ADC_MspInit+0x21e>
  else if(hadc->Instance==ADC5)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a22      	ldr	r2, [pc, #136]	; (8001568 <HAL_ADC_MspInit+0x244>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d12e      	bne.n	8001542 <HAL_ADC_MspInit+0x21e>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_ADC_MspInit+0x23c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_ADC_MspInit+0x23c>)
 80014ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_ADC_MspInit+0x23c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10b      	bne.n	800150e <HAL_ADC_MspInit+0x1ea>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_ADC_MspInit+0x22c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_OUTPUT_Pin|V_INPUT_Pin;
 8001526:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152c:	2303      	movs	r3, #3
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153e:	f002 f99d 	bl	800387c <HAL_GPIO_Init>
}
 8001542:	bf00      	nop
 8001544:	3748      	adds	r7, #72	; 0x48
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000005c 	.word	0x2000005c
 8001550:	40021000 	.word	0x40021000
 8001554:	48000400 	.word	0x48000400
 8001558:	50000100 	.word	0x50000100
 800155c:	50000400 	.word	0x50000400
 8001560:	20000060 	.word	0x20000060
 8001564:	50000500 	.word	0x50000500
 8001568:	50000600 	.word	0x50000600

0800156c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a2e      	ldr	r2, [pc, #184]	; (8001644 <HAL_COMP_MspInit+0xd8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d118      	bne.n	80015c0 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <HAL_COMP_MspInit+0xdc>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a2d      	ldr	r2, [pc, #180]	; (8001648 <HAL_COMP_MspInit+0xdc>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <HAL_COMP_MspInit+0xdc>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
    /**COMP3 GPIO Configuration
    PC1     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = I_INDUCTOR_Pin;
 80015a6:	2302      	movs	r3, #2
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015aa:	2303      	movs	r3, #3
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_INDUCTOR_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4824      	ldr	r0, [pc, #144]	; (800164c <HAL_COMP_MspInit+0xe0>)
 80015ba:	f002 f95f 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 80015be:	e03c      	b.n	800163a <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP5)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a22      	ldr	r2, [pc, #136]	; (8001650 <HAL_COMP_MspInit+0xe4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d119      	bne.n	80015fe <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <HAL_COMP_MspInit+0xdc>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <HAL_COMP_MspInit+0xdc>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_COMP_MspInit+0xdc>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I_OUTPUT_Pin;
 80015e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e8:	2303      	movs	r3, #3
 80015ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4817      	ldr	r0, [pc, #92]	; (8001654 <HAL_COMP_MspInit+0xe8>)
 80015f8:	f002 f940 	bl	800387c <HAL_GPIO_Init>
}
 80015fc:	e01d      	b.n	800163a <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP6)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a15      	ldr	r2, [pc, #84]	; (8001658 <HAL_COMP_MspInit+0xec>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d118      	bne.n	800163a <HAL_COMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_COMP_MspInit+0xdc>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_COMP_MspInit+0xdc>)
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_COMP_MspInit+0xdc>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = I_INPUT_Pin;
 8001620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001626:	2303      	movs	r3, #3
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_INPUT_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <HAL_COMP_MspInit+0xe8>)
 8001636:	f002 f921 	bl	800387c <HAL_GPIO_Init>
}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	; 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40010208 	.word	0x40010208
 8001648:	40021000 	.word	0x40021000
 800164c:	48000800 	.word	0x48000800
 8001650:	40010210 	.word	0x40010210
 8001654:	48000400 	.word	0x48000400
 8001658:	40010214 	.word	0x40010214

0800165c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a25      	ldr	r2, [pc, #148]	; (8001700 <HAL_DAC_MspInit+0xa4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10c      	bne.n	8001688 <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a24      	ldr	r2, [pc, #144]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 8001674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8001686:	e034      	b.n	80016f2 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_DAC_MspInit+0xac>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d10c      	bne.n	80016ac <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
}
 80016aa:	e022      	b.n	80016f2 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC3)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a16      	ldr	r2, [pc, #88]	; (800170c <HAL_DAC_MspInit+0xb0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10c      	bne.n	80016d0 <HAL_DAC_MspInit+0x74>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
}
 80016ce:	e010      	b.n	80016f2 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC4)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_DAC_MspInit+0xb4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d10b      	bne.n	80016f2 <HAL_DAC_MspInit+0x96>
    __HAL_RCC_DAC4_CLK_ENABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 80016e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_DAC_MspInit+0xa8>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
}
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	50000800 	.word	0x50000800
 8001704:	40021000 	.word	0x40021000
 8001708:	50000c00 	.word	0x50000c00
 800170c:	50001000 	.word	0x50001000
 8001710:	50001400 	.word	0x50001400

08001714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_I2C_MspInit+0x7c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d127      	bne.n	8001786 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_I2C_MspInit+0x80>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a16      	ldr	r2, [pc, #88]	; (8001794 <HAL_I2C_MspInit+0x80>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_I2C_MspInit+0x80>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PC7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001752:	2312      	movs	r3, #18
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001756:	2301      	movs	r3, #1
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 800175e:	2308      	movs	r3, #8
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <HAL_I2C_MspInit+0x84>)
 800176a:	f002 f887 	bl	800387c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_I2C_MspInit+0x80>)
 8001770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_I2C_MspInit+0x80>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	65d3      	str	r3, [r2, #92]	; 0x5c
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_I2C_MspInit+0x80>)
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40008400 	.word	0x40008400
 8001794:	40021000 	.word	0x40021000
 8001798:	48000800 	.word	0x48000800

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_UART_MspInit+0x7c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d127      	bne.n	800180e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_UART_MspInit+0x80>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c2:	4a16      	ldr	r2, [pc, #88]	; (800181c <HAL_UART_MspInit+0x80>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_UART_MspInit+0x80>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_UART_MspInit+0x80>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <HAL_UART_MspInit+0x80>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_UART_MspInit+0x80>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017ee:	2330      	movs	r3, #48	; 0x30
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017fe:	2307      	movs	r3, #7
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_UART_MspInit+0x84>)
 800180a:	f002 f837 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40013800 	.word	0x40013800
 800181c:	40021000 	.word	0x40021000
 8001820:	48000800 	.word	0x48000800

08001824 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_PCD_MspInit+0x38>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10b      	bne.n	800184e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_PCD_MspInit+0x3c>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	4a09      	ldr	r2, [pc, #36]	; (8001860 <HAL_PCD_MspInit+0x3c>)
 800183c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001840:	6593      	str	r3, [r2, #88]	; 0x58
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <HAL_PCD_MspInit+0x3c>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40005c00 	.word	0x40005c00
 8001860:	40021000 	.word	0x40021000

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f894 	bl	80019e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <SystemInit+0x28>)
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <SystemInit+0x28>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SystemInit+0x28>)
 80018d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018da:	609a      	str	r2, [r3, #8]
#endif
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f0:	480d      	ldr	r0, [pc, #52]	; (8001928 <LoopForever+0x6>)
  ldr r1, =_edata
 80018f2:	490e      	ldr	r1, [pc, #56]	; (800192c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <LoopForever+0xe>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001908:	4c0b      	ldr	r4, [pc, #44]	; (8001938 <LoopForever+0x16>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001916:	f7ff ffd3 	bl	80018c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191a:	f005 fc9d 	bl	8007258 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800191e:	f7fe fdf7 	bl	8000510 <main>

08001922 <LoopForever>:

LoopForever:
    b LoopForever
 8001922:	e7fe      	b.n	8001922 <LoopForever>
  ldr   r0, =_estack
 8001924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001930:	08007318 	.word	0x08007318
  ldr r2, =_sbss
 8001934:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001938:	20000734 	.word	0x20000734

0800193c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC1_2_IRQHandler>

0800193e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f001 fd1f 	bl	800338c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194e:	2000      	movs	r0, #0
 8001950:	f000 f80e 	bl	8001970 <HAL_InitTick>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	71fb      	strb	r3, [r7, #7]
 800195e:	e001      	b.n	8001964 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001960:	f7ff fcbc 	bl	80012dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001964:	79fb      	ldrb	r3, [r7, #7]

}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_InitTick+0x68>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d022      	beq.n	80019ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_InitTick+0x6c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_InitTick+0x68>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001990:	fbb1 f3f3 	udiv	r3, r1, r3
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f001 fd1c 	bl	80033d6 <HAL_SYSTICK_Config>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10f      	bne.n	80019c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	d809      	bhi.n	80019be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019aa:	2200      	movs	r2, #0
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	f04f 30ff 	mov.w	r0, #4294967295
 80019b2:	f001 fcf6 	bl	80033a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_InitTick+0x70>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	e007      	b.n	80019ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	e004      	b.n	80019ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	e001      	b.n	80019ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000034 	.word	0x20000034
 80019dc:	2000002c 	.word	0x2000002c
 80019e0:	20000030 	.word	0x20000030

080019e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_IncTick+0x1c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_IncTick+0x20>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <HAL_IncTick+0x1c>)
 80019f4:	6013      	str	r3, [r2, #0]
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20000730 	.word	0x20000730
 8001a04:	20000034 	.word	0x20000034

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000730 	.word	0x20000730

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d004      	beq.n	8001a44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_Delay+0x40>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4413      	add	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a44:	bf00      	nop
 8001a46:	f7ff ffdf 	bl	8001a08 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d8f7      	bhi.n	8001a46 <HAL_Delay+0x26>
  {
  }
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000034 	.word	0x20000034

08001a64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3360      	adds	r3, #96	; 0x60
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <LL_ADC_SetOffset+0x44>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b04:	bf00      	nop
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	03fff000 	.word	0x03fff000

08001b14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3360      	adds	r3, #96	; 0x60
 8001b22:	461a      	mov	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	461a      	mov	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b087      	sub	sp, #28
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3360      	adds	r3, #96	; 0x60
 8001b86:	461a      	mov	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ba0:	bf00      	nop
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3360      	adds	r3, #96	; 0x60
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001bd6:	bf00      	nop
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	615a      	str	r2, [r3, #20]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3330      	adds	r3, #48	; 0x30
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	4413      	add	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	211f      	movs	r1, #31
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	0e9b      	lsrs	r3, r3, #26
 8001c40:	f003 011f 	and.w	r1, r3, #31
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c54:	bf00      	nop
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3314      	adds	r3, #20
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	0e5b      	lsrs	r3, r3, #25
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	0d1b      	lsrs	r3, r3, #20
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	2107      	movs	r1, #7
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	401a      	ands	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	0d1b      	lsrs	r3, r3, #20
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001caa:	bf00      	nop
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0318 	and.w	r3, r3, #24
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cdc:	40d9      	lsrs	r1, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	0007ffff 	.word	0x0007ffff

08001d00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6093      	str	r3, [r2, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d38:	d101      	bne.n	8001d3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d88:	d101      	bne.n	8001d8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <LL_ADC_IsEnabled+0x18>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <LL_ADC_IsEnabled+0x1a>
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d101      	bne.n	8001dda <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d101      	bne.n	8001e00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1ad      	b.n	8002186 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d109      	bne.n	8001e4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff fa73 	bl	8001324 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff67 	bl	8001d24 <LL_ADC_IsDeepPowerDownEnabled>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff4d 	bl	8001d00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff82 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d113      	bne.n	8001e9e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff66 	bl	8001d4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e80:	4b9e      	ldr	r3, [pc, #632]	; (80020fc <HAL_ADC_Init+0x2ec>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	4a9e      	ldr	r2, [pc, #632]	; (8002100 <HAL_ADC_Init+0x2f0>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff66 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10d      	bne.n	8001eca <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff77 	bl	8001dc2 <LL_ADC_REG_IsConversionOngoing>
 8001ed4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 8148 	bne.w	8002174 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 8144 	bne.w	8002174 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ef4:	f043 0202 	orr.w	r2, r3, #2
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff4b 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d141      	bne.n	8001f90 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f14:	d004      	beq.n	8001f20 <HAL_ADC_Init+0x110>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7a      	ldr	r2, [pc, #488]	; (8002104 <HAL_ADC_Init+0x2f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d10f      	bne.n	8001f40 <HAL_ADC_Init+0x130>
 8001f20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f24:	f7ff ff3a 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f28:	4604      	mov	r4, r0
 8001f2a:	4876      	ldr	r0, [pc, #472]	; (8002104 <HAL_ADC_Init+0x2f4>)
 8001f2c:	f7ff ff36 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4323      	orrs	r3, r4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e012      	b.n	8001f66 <HAL_ADC_Init+0x156>
 8001f40:	4871      	ldr	r0, [pc, #452]	; (8002108 <HAL_ADC_Init+0x2f8>)
 8001f42:	f7ff ff2b 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f46:	4604      	mov	r4, r0
 8001f48:	4870      	ldr	r0, [pc, #448]	; (800210c <HAL_ADC_Init+0x2fc>)
 8001f4a:	f7ff ff27 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	431c      	orrs	r4, r3
 8001f52:	486f      	ldr	r0, [pc, #444]	; (8002110 <HAL_ADC_Init+0x300>)
 8001f54:	f7ff ff22 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4323      	orrs	r3, r4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d012      	beq.n	8001f90 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f72:	d004      	beq.n	8001f7e <HAL_ADC_Init+0x16e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a62      	ldr	r2, [pc, #392]	; (8002104 <HAL_ADC_Init+0x2f4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_Init+0x172>
 8001f7e:	4a65      	ldr	r2, [pc, #404]	; (8002114 <HAL_ADC_Init+0x304>)
 8001f80:	e000      	b.n	8001f84 <HAL_ADC_Init+0x174>
 8001f82:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_ADC_Init+0x308>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f7ff fd6a 	bl	8001a64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7f5b      	ldrb	r3, [r3, #29]
 8001f94:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f9a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fa0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fa6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d106      	bne.n	8001fcc <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	045b      	lsls	r3, r3, #17
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b4b      	ldr	r3, [pc, #300]	; (800211c <HAL_ADC_Init+0x30c>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fed3 	bl	8001dc2 <LL_ADC_REG_IsConversionOngoing>
 800201c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fee0 	bl	8001de8 <LL_ADC_INJ_IsConversionOngoing>
 8002028:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d17f      	bne.n	8002130 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d17c      	bne.n	8002130 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800203a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002042:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002052:	f023 0302 	bic.w	r3, r3, #2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	430b      	orrs	r3, r1
 800205e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d017      	beq.n	8002098 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002076:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002080:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002084:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6911      	ldr	r1, [r2, #16]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	430b      	orrs	r3, r1
 8002092:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002096:	e013      	b.n	80020c0 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d12a      	bne.n	8002120 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020e0:	4311      	orrs	r1, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020e6:	4311      	orrs	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ec:	430a      	orrs	r2, r1
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	611a      	str	r2, [r3, #16]
 80020fa:	e019      	b.n	8002130 <HAL_ADC_Init+0x320>
 80020fc:	2000002c 	.word	0x2000002c
 8002100:	053e2d63 	.word	0x053e2d63
 8002104:	50000100 	.word	0x50000100
 8002108:	50000400 	.word	0x50000400
 800210c:	50000500 	.word	0x50000500
 8002110:	50000600 	.word	0x50000600
 8002114:	50000300 	.word	0x50000300
 8002118:	50000700 	.word	0x50000700
 800211c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10c      	bne.n	8002152 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f023 010f 	bic.w	r1, r3, #15
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
 8002150:	e007      	b.n	8002162 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 020f 	bic.w	r2, r2, #15
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	65da      	str	r2, [r3, #92]	; 0x5c
 8002172:	e007      	b.n	8002184 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	f043 0210 	orr.w	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002184:	7ffb      	ldrb	r3, [r7, #31]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}
 800218e:	bf00      	nop

08002190 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0b6      	sub	sp, #216	; 0xd8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d102      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x24>
 80021ae:	2302      	movs	r3, #2
 80021b0:	f000 bc12 	b.w	80029d8 <HAL_ADC_ConfigChannel+0x848>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fdfe 	bl	8001dc2 <LL_ADC_REG_IsConversionOngoing>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 83f2 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	f7ff fd14 	bl	8001c08 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fdec 	bl	8001dc2 <LL_ADC_REG_IsConversionOngoing>
 80021ea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fdf8 	bl	8001de8 <LL_ADC_INJ_IsConversionOngoing>
 80021f8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 81d9 	bne.w	80025b8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 81d4 	bne.w	80025b8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002218:	d10f      	bne.n	800223a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	4619      	mov	r1, r3
 8002226:	f7ff fd1b 	bl	8001c60 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fcd5 	bl	8001be2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002238:	e00e      	b.n	8002258 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6819      	ldr	r1, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	461a      	mov	r2, r3
 8002248:	f7ff fd0a 	bl	8001c60 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fcc5 	bl	8001be2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	08db      	lsrs	r3, r3, #3
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b04      	cmp	r3, #4
 8002278:	d022      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6919      	ldr	r1, [r3, #16]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800228a:	f7ff fc1f 	bl	8001acc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	461a      	mov	r2, r3
 800229c:	f7ff fc6b 	bl	8001b76 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6919      	ldr	r1, [r3, #16]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	7f1b      	ldrb	r3, [r3, #28]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d102      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x126>
 80022b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b4:	e000      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x128>
 80022b6:	2300      	movs	r3, #0
 80022b8:	461a      	mov	r2, r3
 80022ba:	f7ff fc77 	bl	8001bac <LL_ADC_SetOffsetSaturation>
 80022be:	e17b      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fc24 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10a      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x15c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fc19 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	f003 021f 	and.w	r2, r3, #31
 80022ea:	e01e      	b.n	800232a <HAL_ADC_ConfigChannel+0x19a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fc0e 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800230a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800230e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800231a:	2320      	movs	r3, #32
 800231c:	e004      	b.n	8002328 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800231e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002332:	2b00      	cmp	r3, #0
 8002334:	d105      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x1b2>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	0e9b      	lsrs	r3, r3, #26
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	e018      	b.n	8002374 <HAL_ADC_ConfigChannel+0x1e4>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800235a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800235e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e004      	b.n	8002374 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800236a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	429a      	cmp	r2, r3
 8002376:	d106      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fbdd 	bl	8001b40 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fbc1 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x222>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fbb6 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	0e9b      	lsrs	r3, r3, #26
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	e01e      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x260>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2101      	movs	r1, #1
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fbab 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e004      	b.n	80023ee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80023e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x278>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0e9b      	lsrs	r3, r3, #26
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	e018      	b.n	800243a <HAL_ADC_ConfigChannel+0x2aa>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800241c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e004      	b.n	800243a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	429a      	cmp	r2, r3
 800243c:	d106      	bne.n	800244c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	2101      	movs	r1, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fb7a 	bl	8001b40 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2102      	movs	r1, #2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fb5e 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x2e8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2102      	movs	r1, #2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fb53 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	f003 021f 	and.w	r2, r3, #31
 8002476:	e01e      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x326>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2102      	movs	r1, #2
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fb48 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002496:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800249a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800249e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80024a6:	2320      	movs	r3, #32
 80024a8:	e004      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80024aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x33e>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	e016      	b.n	80024fc <HAL_ADC_ConfigChannel+0x36c>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80024ee:	2320      	movs	r3, #32
 80024f0:	e004      	b.n	80024fc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80024f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d106      	bne.n	800250e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	2102      	movs	r1, #2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fb19 	bl	8001b40 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2103      	movs	r1, #3
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fafd 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <HAL_ADC_ConfigChannel+0x3aa>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2103      	movs	r1, #3
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff faf2 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	0e9b      	lsrs	r3, r3, #26
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	e017      	b.n	800256a <HAL_ADC_ConfigChannel+0x3da>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2103      	movs	r1, #3
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fae7 	bl	8001b14 <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002554:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e003      	b.n	8002568 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x3f2>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	0e9b      	lsrs	r3, r3, #26
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	e011      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x416>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002592:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800259a:	2320      	movs	r3, #32
 800259c:	e003      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800259e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d106      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	2103      	movs	r1, #3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fac4 	bl	8001b40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fbed 	bl	8001d9c <LL_ADC_IsEnabled>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 813d 	bne.w	8002844 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6819      	ldr	r1, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f7ff fb6e 	bl	8001cb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4aa2      	ldr	r2, [pc, #648]	; (800286c <HAL_ADC_ConfigChannel+0x6dc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f040 812e 	bne.w	8002844 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x480>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	3301      	adds	r3, #1
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	2b09      	cmp	r3, #9
 8002606:	bf94      	ite	ls
 8002608:	2301      	movls	r3, #1
 800260a:	2300      	movhi	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e019      	b.n	8002644 <HAL_ADC_ConfigChannel+0x4b4>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800261e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002620:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e003      	b.n	8002634 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800262c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	2b09      	cmp	r3, #9
 800263c:	bf94      	ite	ls
 800263e:	2301      	movls	r3, #1
 8002640:	2300      	movhi	r3, #0
 8002642:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002644:	2b00      	cmp	r3, #0
 8002646:	d079      	beq.n	800273c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x4d4>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	3301      	adds	r3, #1
 800265c:	069b      	lsls	r3, r3, #26
 800265e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002662:	e015      	b.n	8002690 <HAL_ADC_ConfigChannel+0x500>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002674:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e003      	b.n	8002688 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3301      	adds	r3, #1
 800268a:	069b      	lsls	r3, r3, #26
 800268c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x520>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	3301      	adds	r3, #1
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	e017      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x550>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80026c8:	2320      	movs	r3, #32
 80026ca:	e003      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80026cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	ea42 0103 	orr.w	r1, r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x576>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0e9b      	lsrs	r3, r3, #26
 80026f6:	3301      	adds	r3, #1
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	051b      	lsls	r3, r3, #20
 8002704:	e018      	b.n	8002738 <HAL_ADC_ConfigChannel+0x5a8>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e003      	b.n	800272a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f003 021f 	and.w	r2, r3, #31
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002738:	430b      	orrs	r3, r1
 800273a:	e07e      	b.n	800283a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x5c8>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	3301      	adds	r3, #1
 8002750:	069b      	lsls	r3, r3, #26
 8002752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002756:	e015      	b.n	8002784 <HAL_ADC_ConfigChannel+0x5f4>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002770:	2320      	movs	r3, #32
 8002772:	e003      	b.n	800277c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	3301      	adds	r3, #1
 800277e:	069b      	lsls	r3, r3, #26
 8002780:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x614>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0e9b      	lsrs	r3, r3, #26
 8002796:	3301      	adds	r3, #1
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	e017      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x644>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	61fb      	str	r3, [r7, #28]
  return result;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	e003      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2101      	movs	r1, #1
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	ea42 0103 	orr.w	r1, r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10d      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x670>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	3301      	adds	r3, #1
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	3b1e      	subs	r3, #30
 80027f8:	051b      	lsls	r3, r3, #20
 80027fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027fe:	e01b      	b.n	8002838 <HAL_ADC_ConfigChannel+0x6a8>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	613b      	str	r3, [r7, #16]
  return result;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002818:	2320      	movs	r3, #32
 800281a:	e003      	b.n	8002824 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	3301      	adds	r3, #1
 8002826:	f003 021f 	and.w	r2, r3, #31
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	3b1e      	subs	r3, #30
 8002832:	051b      	lsls	r3, r3, #20
 8002834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002838:	430b      	orrs	r3, r1
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	6892      	ldr	r2, [r2, #8]
 800283e:	4619      	mov	r1, r3
 8002840:	f7ff fa0e 	bl	8001c60 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_ADC_ConfigChannel+0x6e0>)
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80bd 	beq.w	80029cc <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800285a:	d004      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x6d6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_ADC_ConfigChannel+0x6e4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10a      	bne.n	800287c <HAL_ADC_ConfigChannel+0x6ec>
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <HAL_ADC_ConfigChannel+0x6e8>)
 8002868:	e009      	b.n	800287e <HAL_ADC_ConfigChannel+0x6ee>
 800286a:	bf00      	nop
 800286c:	407f0000 	.word	0x407f0000
 8002870:	80080000 	.word	0x80080000
 8002874:	50000100 	.word	0x50000100
 8002878:	50000300 	.word	0x50000300
 800287c:	4b58      	ldr	r3, [pc, #352]	; (80029e0 <HAL_ADC_ConfigChannel+0x850>)
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f916 	bl	8001ab0 <LL_ADC_GetCommonPathInternalCh>
 8002884:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a55      	ldr	r2, [pc, #340]	; (80029e4 <HAL_ADC_ConfigChannel+0x854>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_ADC_ConfigChannel+0x70c>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a54      	ldr	r2, [pc, #336]	; (80029e8 <HAL_ADC_ConfigChannel+0x858>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d139      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800289c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d133      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b0:	d005      	beq.n	80028be <HAL_ADC_ConfigChannel+0x72e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a4d      	ldr	r2, [pc, #308]	; (80029ec <HAL_ADC_ConfigChannel+0x85c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	f040 8084 	bne.w	80029c6 <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c6:	d004      	beq.n	80028d2 <HAL_ADC_ConfigChannel+0x742>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a48      	ldr	r2, [pc, #288]	; (80029f0 <HAL_ADC_ConfigChannel+0x860>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x746>
 80028d2:	4a48      	ldr	r2, [pc, #288]	; (80029f4 <HAL_ADC_ConfigChannel+0x864>)
 80028d4:	e000      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x748>
 80028d6:	4a42      	ldr	r2, [pc, #264]	; (80029e0 <HAL_ADC_ConfigChannel+0x850>)
 80028d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f7ff f8d1 	bl	8001a8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80028e8:	4b43      	ldr	r3, [pc, #268]	; (80029f8 <HAL_ADC_ConfigChannel+0x868>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	099b      	lsrs	r3, r3, #6
 80028ee:	4a43      	ldr	r2, [pc, #268]	; (80029fc <HAL_ADC_ConfigChannel+0x86c>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	099a      	lsrs	r2, r3, #6
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002900:	e002      	b.n	8002908 <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3b01      	subs	r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f9      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800290e:	e05a      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3a      	ldr	r2, [pc, #232]	; (8002a00 <HAL_ADC_ConfigChannel+0x870>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d125      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x7d6>
 800291a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800291e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11f      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <HAL_ADC_ConfigChannel+0x860>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d104      	bne.n	800293a <HAL_ADC_ConfigChannel+0x7aa>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a33      	ldr	r2, [pc, #204]	; (8002a04 <HAL_ADC_ConfigChannel+0x874>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d047      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002942:	d004      	beq.n	800294e <HAL_ADC_ConfigChannel+0x7be>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_ADC_ConfigChannel+0x860>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
 800294e:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <HAL_ADC_ConfigChannel+0x864>)
 8002950:	e000      	b.n	8002954 <HAL_ADC_ConfigChannel+0x7c4>
 8002952:	4a23      	ldr	r2, [pc, #140]	; (80029e0 <HAL_ADC_ConfigChannel+0x850>)
 8002954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f7ff f893 	bl	8001a8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002964:	e031      	b.n	80029ca <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <HAL_ADC_ConfigChannel+0x878>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d12d      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d127      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <HAL_ADC_ConfigChannel+0x860>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d022      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800298e:	d004      	beq.n	800299a <HAL_ADC_ConfigChannel+0x80a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <HAL_ADC_ConfigChannel+0x860>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_ADC_ConfigChannel+0x80e>
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_ADC_ConfigChannel+0x864>)
 800299c:	e000      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x810>
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_ADC_ConfigChannel+0x850>)
 80029a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f7ff f86d 	bl	8001a8a <LL_ADC_SetCommonPathInternalCh>
 80029b0:	e00c      	b.n	80029cc <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80029c4:	e002      	b.n	80029cc <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c6:	bf00      	nop
 80029c8:	e000      	b.n	80029cc <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80029d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029d8:	4618      	mov	r0, r3
 80029da:	37d8      	adds	r7, #216	; 0xd8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	50000700 	.word	0x50000700
 80029e4:	c3210000 	.word	0xc3210000
 80029e8:	90c00010 	.word	0x90c00010
 80029ec:	50000600 	.word	0x50000600
 80029f0:	50000100 	.word	0x50000100
 80029f4:	50000300 	.word	0x50000300
 80029f8:	2000002c 	.word	0x2000002c
 80029fc:	053e2d63 	.word	0x053e2d63
 8002a00:	c7520000 	.word	0xc7520000
 8002a04:	50000500 	.word	0x50000500
 8002a08:	cb840000 	.word	0xcb840000

08002a0c <LL_ADC_IsEnabled>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <LL_ADC_IsEnabled+0x18>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <LL_ADC_IsEnabled+0x1a>
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d101      	bne.n	8002a4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b0a1      	sub	sp, #132	; 0x84
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e0e3      	b.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a86:	d102      	bne.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	e009      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a6e      	ldr	r2, [pc, #440]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d102      	bne.n	8002a9e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002a98:	4b6d      	ldr	r3, [pc, #436]	; (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	e001      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10b      	bne.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0be      	b.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ffb5 	bl	8002a32 <LL_ADC_REG_IsConversionOngoing>
 8002ac8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ffaf 	bl	8002a32 <LL_ADC_REG_IsConversionOngoing>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 80a0 	bne.w	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 809c 	bne.w	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aec:	d004      	beq.n	8002af8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a55      	ldr	r2, [pc, #340]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002afa:	e000      	b.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002afc:	4b56      	ldr	r3, [pc, #344]	; (8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002afe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d04b      	beq.n	8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b1a:	035b      	lsls	r3, r3, #13
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b2c:	d004      	beq.n	8002b38 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a45      	ldr	r2, [pc, #276]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d10f      	bne.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002b38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b3c:	f7ff ff66 	bl	8002a0c <LL_ADC_IsEnabled>
 8002b40:	4604      	mov	r4, r0
 8002b42:	4841      	ldr	r0, [pc, #260]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002b44:	f7ff ff62 	bl	8002a0c <LL_ADC_IsEnabled>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4323      	orrs	r3, r4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	e012      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002b58:	483c      	ldr	r0, [pc, #240]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002b5a:	f7ff ff57 	bl	8002a0c <LL_ADC_IsEnabled>
 8002b5e:	4604      	mov	r4, r0
 8002b60:	483b      	ldr	r0, [pc, #236]	; (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b62:	f7ff ff53 	bl	8002a0c <LL_ADC_IsEnabled>
 8002b66:	4603      	mov	r3, r0
 8002b68:	431c      	orrs	r4, r3
 8002b6a:	483c      	ldr	r0, [pc, #240]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002b6c:	f7ff ff4e 	bl	8002a0c <LL_ADC_IsEnabled>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4323      	orrs	r3, r4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d056      	beq.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b8a:	f023 030f 	bic.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	6811      	ldr	r1, [r2, #0]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	6892      	ldr	r2, [r2, #8]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b9c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b9e:	e047      	b.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002baa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb4:	d004      	beq.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a23      	ldr	r2, [pc, #140]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10f      	bne.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002bc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bc4:	f7ff ff22 	bl	8002a0c <LL_ADC_IsEnabled>
 8002bc8:	4604      	mov	r4, r0
 8002bca:	481f      	ldr	r0, [pc, #124]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002bcc:	f7ff ff1e 	bl	8002a0c <LL_ADC_IsEnabled>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4323      	orrs	r3, r4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e012      	b.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002be0:	481a      	ldr	r0, [pc, #104]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002be2:	f7ff ff13 	bl	8002a0c <LL_ADC_IsEnabled>
 8002be6:	4604      	mov	r4, r0
 8002be8:	4819      	ldr	r0, [pc, #100]	; (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bea:	f7ff ff0f 	bl	8002a0c <LL_ADC_IsEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	431c      	orrs	r4, r3
 8002bf2:	481a      	ldr	r0, [pc, #104]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002bf4:	f7ff ff0a 	bl	8002a0c <LL_ADC_IsEnabled>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4323      	orrs	r3, r4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d012      	beq.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c12:	f023 030f 	bic.w	r3, r3, #15
 8002c16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c18:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1a:	e009      	b.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c2e:	e000      	b.n	8002c32 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3784      	adds	r7, #132	; 0x84
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd90      	pop	{r4, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	50000100 	.word	0x50000100
 8002c4c:	50000400 	.word	0x50000400
 8002c50:	50000500 	.word	0x50000500
 8002c54:	50000300 	.word	0x50000300
 8002c58:	50000700 	.word	0x50000700
 8002c5c:	50000600 	.word	0x50000600

08002c60 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <LL_EXTI_EnableIT_0_31+0x20>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4904      	ldr	r1, [pc, #16]	; (8002c80 <LL_EXTI_EnableIT_0_31+0x20>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40010400 	.word	0x40010400

08002c84 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <LL_EXTI_EnableIT_32_63+0x20>)
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	4904      	ldr	r1, [pc, #16]	; (8002ca4 <LL_EXTI_EnableIT_32_63+0x20>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	620b      	str	r3, [r1, #32]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40010400 	.word	0x40010400

08002ca8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <LL_EXTI_DisableIT_0_31+0x24>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	4904      	ldr	r1, [pc, #16]	; (8002ccc <LL_EXTI_DisableIT_0_31+0x24>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40010400 	.word	0x40010400

08002cd0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <LL_EXTI_DisableIT_32_63+0x24>)
 8002cda:	6a1a      	ldr	r2, [r3, #32]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	4904      	ldr	r1, [pc, #16]	; (8002cf4 <LL_EXTI_DisableIT_32_63+0x24>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	620b      	str	r3, [r1, #32]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40010400 	.word	0x40010400

08002cf8 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4904      	ldr	r1, [pc, #16]	; (8002d18 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]

}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40010400 	.word	0x40010400

08002d1c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d28:	4904      	ldr	r1, [pc, #16]	; (8002d3c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40010400 	.word	0x40010400

08002d40 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	4904      	ldr	r1, [pc, #16]	; (8002d64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40010400 	.word	0x40010400

08002d68 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	4904      	ldr	r1, [pc, #16]	; (8002d8c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40010400 	.word	0x40010400

08002d90 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4904      	ldr	r1, [pc, #16]	; (8002db0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]

}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40010400 	.word	0x40010400

08002db4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc0:	4904      	ldr	r1, [pc, #16]	; (8002dd4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	4904      	ldr	r1, [pc, #16]	; (8002dfc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]

}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40010400 	.word	0x40010400

08002e00 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	4904      	ldr	r1, [pc, #16]	; (8002e24 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40010400 	.word	0x40010400

08002e28 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	4904      	ldr	r1, [pc, #16]	; (8002e48 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60cb      	str	r3, [r1, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40010400 	.word	0x40010400

08002e4c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	4904      	ldr	r1, [pc, #16]	; (8002e6c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40010400 	.word	0x40010400

08002e70 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	4904      	ldr	r1, [pc, #16]	; (8002e94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40010400 	.word	0x40010400

08002e98 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	4904      	ldr	r1, [pc, #16]	; (8002ebc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6153      	str	r3, [r2, #20]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40010400 	.word	0x40010400

08002ee0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8002ee8:	4a04      	ldr	r2, [pc, #16]	; (8002efc <LL_EXTI_ClearFlag_32_63+0x1c>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40010400 	.word	0x40010400

08002f00 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	77fb      	strb	r3, [r7, #31]
 8002f1a:	e180      	b.n	800321e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f2a:	d102      	bne.n	8002f32 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	77fb      	strb	r3, [r7, #31]
 8002f30:	e175      	b.n	800321e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7f5b      	ldrb	r3, [r3, #29]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d108      	bne.n	8002f4e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fe fb0f 	bl	800156c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f58:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b98      	ldr	r3, [pc, #608]	; (80031e0 <HAL_COMP_Init+0x2e0>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	6979      	ldr	r1, [r7, #20]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d015      	beq.n	8002fc6 <HAL_COMP_Init+0xc6>
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d112      	bne.n	8002fc6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002fa0:	4b90      	ldr	r3, [pc, #576]	; (80031e4 <HAL_COMP_Init+0x2e4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	4a90      	ldr	r2, [pc, #576]	; (80031e8 <HAL_COMP_Init+0x2e8>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	099a      	lsrs	r2, r3, #6
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002fb8:	e002      	b.n	8002fc0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f9      	bne.n	8002fba <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a88      	ldr	r2, [pc, #544]	; (80031ec <HAL_COMP_Init+0x2ec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d028      	beq.n	8003022 <HAL_COMP_Init+0x122>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a86      	ldr	r2, [pc, #536]	; (80031f0 <HAL_COMP_Init+0x2f0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d020      	beq.n	800301c <HAL_COMP_Init+0x11c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a85      	ldr	r2, [pc, #532]	; (80031f4 <HAL_COMP_Init+0x2f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d018      	beq.n	8003016 <HAL_COMP_Init+0x116>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a83      	ldr	r2, [pc, #524]	; (80031f8 <HAL_COMP_Init+0x2f8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d010      	beq.n	8003010 <HAL_COMP_Init+0x110>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a82      	ldr	r2, [pc, #520]	; (80031fc <HAL_COMP_Init+0x2fc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d008      	beq.n	800300a <HAL_COMP_Init+0x10a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a80      	ldr	r2, [pc, #512]	; (8003200 <HAL_COMP_Init+0x300>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_COMP_Init+0x106>
 8003002:	2301      	movs	r3, #1
 8003004:	e00f      	b.n	8003026 <HAL_COMP_Init+0x126>
 8003006:	2302      	movs	r3, #2
 8003008:	e00d      	b.n	8003026 <HAL_COMP_Init+0x126>
 800300a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800300e:	e00a      	b.n	8003026 <HAL_COMP_Init+0x126>
 8003010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003014:	e007      	b.n	8003026 <HAL_COMP_Init+0x126>
 8003016:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800301a:	e004      	b.n	8003026 <HAL_COMP_Init+0x126>
 800301c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003020:	e001      	b.n	8003026 <HAL_COMP_Init+0x126>
 8003022:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003026:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80b6 	beq.w	80031a2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	d011      	beq.n	8003066 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a6e      	ldr	r2, [pc, #440]	; (8003200 <HAL_COMP_Init+0x300>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_COMP_Init+0x156>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a6c      	ldr	r2, [pc, #432]	; (8003204 <HAL_COMP_Init+0x304>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d103      	bne.n	800305e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003056:	6938      	ldr	r0, [r7, #16]
 8003058:	f7ff feac 	bl	8002db4 <LL_EXTI_EnableRisingTrig_32_63>
 800305c:	e014      	b.n	8003088 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800305e:	6938      	ldr	r0, [r7, #16]
 8003060:	f7ff fe96 	bl	8002d90 <LL_EXTI_EnableRisingTrig_0_31>
 8003064:	e010      	b.n	8003088 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a65      	ldr	r2, [pc, #404]	; (8003200 <HAL_COMP_Init+0x300>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_COMP_Init+0x17a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a63      	ldr	r2, [pc, #396]	; (8003204 <HAL_COMP_Init+0x304>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d103      	bne.n	8003082 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800307a:	6938      	ldr	r0, [r7, #16]
 800307c:	f7ff fec0 	bl	8002e00 <LL_EXTI_DisableRisingTrig_32_63>
 8003080:	e002      	b.n	8003088 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003082:	6938      	ldr	r0, [r7, #16]
 8003084:	f7ff fea8 	bl	8002dd8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d011      	beq.n	80030b8 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a59      	ldr	r2, [pc, #356]	; (8003200 <HAL_COMP_Init+0x300>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <HAL_COMP_Init+0x1a8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_COMP_Init+0x304>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d103      	bne.n	80030b0 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80030a8:	6938      	ldr	r0, [r7, #16]
 80030aa:	f7ff fecf 	bl	8002e4c <LL_EXTI_EnableFallingTrig_32_63>
 80030ae:	e014      	b.n	80030da <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80030b0:	6938      	ldr	r0, [r7, #16]
 80030b2:	f7ff feb9 	bl	8002e28 <LL_EXTI_EnableFallingTrig_0_31>
 80030b6:	e010      	b.n	80030da <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a50      	ldr	r2, [pc, #320]	; (8003200 <HAL_COMP_Init+0x300>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_COMP_Init+0x1cc>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a4f      	ldr	r2, [pc, #316]	; (8003204 <HAL_COMP_Init+0x304>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d103      	bne.n	80030d4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80030cc:	6938      	ldr	r0, [r7, #16]
 80030ce:	f7ff fee3 	bl	8002e98 <LL_EXTI_DisableFallingTrig_32_63>
 80030d2:	e002      	b.n	80030da <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80030d4:	6938      	ldr	r0, [r7, #16]
 80030d6:	f7ff fecb 	bl	8002e70 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a48      	ldr	r2, [pc, #288]	; (8003200 <HAL_COMP_Init+0x300>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_COMP_Init+0x1ee>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a46      	ldr	r2, [pc, #280]	; (8003204 <HAL_COMP_Init+0x304>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d103      	bne.n	80030f6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80030ee:	6938      	ldr	r0, [r7, #16]
 80030f0:	f7ff fef6 	bl	8002ee0 <LL_EXTI_ClearFlag_32_63>
 80030f4:	e002      	b.n	80030fc <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80030f6:	6938      	ldr	r0, [r7, #16]
 80030f8:	f7ff fee2 	bl	8002ec0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d011      	beq.n	800312c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <HAL_COMP_Init+0x300>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <HAL_COMP_Init+0x21c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <HAL_COMP_Init+0x304>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800311c:	6938      	ldr	r0, [r7, #16]
 800311e:	f7ff fdfd 	bl	8002d1c <LL_EXTI_EnableEvent_32_63>
 8003122:	e014      	b.n	800314e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8003124:	6938      	ldr	r0, [r7, #16]
 8003126:	f7ff fde7 	bl	8002cf8 <LL_EXTI_EnableEvent_0_31>
 800312a:	e010      	b.n	800314e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a33      	ldr	r2, [pc, #204]	; (8003200 <HAL_COMP_Init+0x300>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <HAL_COMP_Init+0x240>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a32      	ldr	r2, [pc, #200]	; (8003204 <HAL_COMP_Init+0x304>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d103      	bne.n	8003148 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003140:	6938      	ldr	r0, [r7, #16]
 8003142:	f7ff fe11 	bl	8002d68 <LL_EXTI_DisableEvent_32_63>
 8003146:	e002      	b.n	800314e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003148:	6938      	ldr	r0, [r7, #16]
 800314a:	f7ff fdf9 	bl	8002d40 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d011      	beq.n	800317e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a28      	ldr	r2, [pc, #160]	; (8003200 <HAL_COMP_Init+0x300>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_COMP_Init+0x26e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <HAL_COMP_Init+0x304>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d103      	bne.n	8003176 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800316e:	6938      	ldr	r0, [r7, #16]
 8003170:	f7ff fd88 	bl	8002c84 <LL_EXTI_EnableIT_32_63>
 8003174:	e04b      	b.n	800320e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003176:	6938      	ldr	r0, [r7, #16]
 8003178:	f7ff fd72 	bl	8002c60 <LL_EXTI_EnableIT_0_31>
 800317c:	e047      	b.n	800320e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <HAL_COMP_Init+0x300>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_COMP_Init+0x292>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <HAL_COMP_Init+0x304>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d103      	bne.n	800319a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003192:	6938      	ldr	r0, [r7, #16]
 8003194:	f7ff fd9c 	bl	8002cd0 <LL_EXTI_DisableIT_32_63>
 8003198:	e039      	b.n	800320e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800319a:	6938      	ldr	r0, [r7, #16]
 800319c:	f7ff fd84 	bl	8002ca8 <LL_EXTI_DisableIT_0_31>
 80031a0:	e035      	b.n	800320e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a16      	ldr	r2, [pc, #88]	; (8003200 <HAL_COMP_Init+0x300>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d004      	beq.n	80031b6 <HAL_COMP_Init+0x2b6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a14      	ldr	r2, [pc, #80]	; (8003204 <HAL_COMP_Init+0x304>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d103      	bne.n	80031be <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80031b6:	6938      	ldr	r0, [r7, #16]
 80031b8:	f7ff fdd6 	bl	8002d68 <LL_EXTI_DisableEvent_32_63>
 80031bc:	e002      	b.n	80031c4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80031be:	6938      	ldr	r0, [r7, #16]
 80031c0:	f7ff fdbe 	bl	8002d40 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <HAL_COMP_Init+0x300>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_COMP_Init+0x2d8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a0c      	ldr	r2, [pc, #48]	; (8003204 <HAL_COMP_Init+0x304>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d117      	bne.n	8003208 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80031d8:	6938      	ldr	r0, [r7, #16]
 80031da:	f7ff fd79 	bl	8002cd0 <LL_EXTI_DisableIT_32_63>
 80031de:	e016      	b.n	800320e <HAL_COMP_Init+0x30e>
 80031e0:	ff007e0f 	.word	0xff007e0f
 80031e4:	2000002c 	.word	0x2000002c
 80031e8:	053e2d63 	.word	0x053e2d63
 80031ec:	40010200 	.word	0x40010200
 80031f0:	40010204 	.word	0x40010204
 80031f4:	40010208 	.word	0x40010208
 80031f8:	4001020c 	.word	0x4001020c
 80031fc:	40010210 	.word	0x40010210
 8003200:	40010214 	.word	0x40010214
 8003204:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003208:	6938      	ldr	r0, [r7, #16]
 800320a:	f7ff fd4d 	bl	8002ca8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	7f5b      	ldrb	r3, [r3, #29]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800321e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325a:	4a04      	ldr	r2, [pc, #16]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	60d3      	str	r3, [r2, #12]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <__NVIC_GetPriorityGrouping+0x18>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 0307 	and.w	r3, r3, #7
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	db0a      	blt.n	80032b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	490c      	ldr	r1, [pc, #48]	; (80032d8 <__NVIC_SetPriority+0x4c>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	440b      	add	r3, r1
 80032b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b4:	e00a      	b.n	80032cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4908      	ldr	r1, [pc, #32]	; (80032dc <__NVIC_SetPriority+0x50>)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	3b04      	subs	r3, #4
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	440b      	add	r3, r1
 80032ca:	761a      	strb	r2, [r3, #24]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000e100 	.word	0xe000e100
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f1c3 0307 	rsb	r3, r3, #7
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	bf28      	it	cs
 80032fe:	2304      	movcs	r3, #4
 8003300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3304      	adds	r3, #4
 8003306:	2b06      	cmp	r3, #6
 8003308:	d902      	bls.n	8003310 <NVIC_EncodePriority+0x30>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3b03      	subs	r3, #3
 800330e:	e000      	b.n	8003312 <NVIC_EncodePriority+0x32>
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	f04f 32ff 	mov.w	r2, #4294967295
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	401a      	ands	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003328:	f04f 31ff 	mov.w	r1, #4294967295
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43d9      	mvns	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	4313      	orrs	r3, r2
         );
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	; 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003358:	d301      	bcc.n	800335e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335a:	2301      	movs	r3, #1
 800335c:	e00f      	b.n	800337e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <SysTick_Config+0x40>)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003366:	210f      	movs	r1, #15
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	f7ff ff8e 	bl	800328c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <SysTick_Config+0x40>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003376:	4b04      	ldr	r3, [pc, #16]	; (8003388 <SysTick_Config+0x40>)
 8003378:	2207      	movs	r2, #7
 800337a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	e000e010 	.word	0xe000e010

0800338c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff47 	bl	8003228 <__NVIC_SetPriorityGrouping>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b086      	sub	sp, #24
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	4603      	mov	r3, r0
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033b0:	f7ff ff5e 	bl	8003270 <__NVIC_GetPriorityGrouping>
 80033b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7ff ff90 	bl	80032e0 <NVIC_EncodePriority>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff5f 	bl	800328c <__NVIC_SetPriority>
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ffb2 	bl	8003348 <SysTick_Config>
 80033e4:	4603      	mov	r3, r0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e014      	b.n	800342a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	791b      	ldrb	r3, [r3, #4]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fe f923 	bl	800165c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	795b      	ldrb	r3, [r3, #5]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_DAC_ConfigChannel+0x1c>
 800344c:	2302      	movs	r3, #2
 800344e:	e196      	b.n	800377e <HAL_DAC_ConfigChannel+0x34a>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2202      	movs	r2, #2
 800345a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d174      	bne.n	800354e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d137      	bne.n	80034da <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800346a:	f7fe facd 	bl	8001a08 <HAL_GetTick>
 800346e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003470:	e011      	b.n	8003496 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003472:	f7fe fac9 	bl	8001a08 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d90a      	bls.n	8003496 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f043 0208 	orr.w	r2, r3, #8
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2203      	movs	r2, #3
 8003490:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e173      	b.n	800377e <HAL_DAC_ConfigChannel+0x34a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e6      	bne.n	8003472 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80034a4:	2001      	movs	r0, #1
 80034a6:	f7fe fabb 	bl	8001a20 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
 80034b4:	e01e      	b.n	80034f4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034b6:	f7fe faa7 	bl	8001a08 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d90a      	bls.n	80034da <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f043 0208 	orr.w	r2, r3, #8
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2203      	movs	r2, #3
 80034d4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e151      	b.n	800377e <HAL_DAC_ConfigChannel+0x34a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	dbe8      	blt.n	80034b6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80034e4:	2001      	movs	r0, #1
 80034e6:	f7fe fa9b 	bl	8001a20 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	ea02 0103 	and.w	r1, r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	409a      	lsls	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	21ff      	movs	r1, #255	; 0xff
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	ea02 0103 	and.w	r1, r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	409a      	lsls	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d11d      	bne.n	8003592 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	221f      	movs	r2, #31
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356e:	4013      	ands	r3, r2
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	4313      	orrs	r3, r2
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2207      	movs	r2, #7
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035aa:	4013      	ands	r3, r2
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	623b      	str	r3, [r7, #32]
 80035be:	e011      	b.n	80035e4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80035cc:	2301      	movs	r3, #1
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	e008      	b.n	80035e4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80035da:	2301      	movs	r3, #1
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	e001      	b.n	80035e4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	6a3a      	ldr	r2, [r7, #32]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	4013      	ands	r3, r2
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	791b      	ldrb	r3, [r3, #4]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_DAC_ConfigChannel+0x1e4>
 8003612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003616:	e000      	b.n	800361a <HAL_DAC_ConfigChannel+0x1e6>
 8003618:	2300      	movs	r3, #0
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003632:	4013      	ands	r3, r2
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	795b      	ldrb	r3, [r3, #5]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d102      	bne.n	8003644 <HAL_DAC_ConfigChannel+0x210>
 800363e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003642:	e000      	b.n	8003646 <HAL_DAC_ConfigChannel+0x212>
 8003644:	2300      	movs	r3, #0
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d114      	bne.n	8003686 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800365c:	f002 fd4e 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 8003660:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	4a48      	ldr	r2, [pc, #288]	; (8003788 <HAL_DAC_ConfigChannel+0x354>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d904      	bls.n	8003674 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	e00f      	b.n	8003694 <HAL_DAC_ConfigChannel+0x260>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4a45      	ldr	r2, [pc, #276]	; (800378c <HAL_DAC_ConfigChannel+0x358>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d90a      	bls.n	8003692 <HAL_DAC_ConfigChannel+0x25e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
 8003684:	e006      	b.n	8003694 <HAL_DAC_ConfigChannel+0x260>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368c:	4313      	orrs	r3, r2
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
 8003690:	e000      	b.n	8003694 <HAL_DAC_ConfigChannel+0x260>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003692:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a2:	4313      	orrs	r3, r2
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	400a      	ands	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e6:	4013      	ands	r3, r2
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fe:	4313      	orrs	r3, r2
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003708:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	22c0      	movs	r2, #192	; 0xc0
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43da      	mvns	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	400a      	ands	r2, r1
 8003724:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	ea02 0103 	and.w	r1, r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	409a      	lsls	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3728      	adds	r7, #40	; 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	09896800 	.word	0x09896800
 800378c:	04c4b400 	.word	0x04c4b400

08003790 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d00d      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2204      	movs	r2, #4
 80037ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	e047      	b.n	8003854 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 020e 	bic.w	r2, r2, #14
 80037d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f003 021f 	and.w	r2, r3, #31
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	2101      	movs	r1, #1
 8003802:	fa01 f202 	lsl.w	r2, r1, r2
 8003806:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003810:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003828:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003832:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
    }
  }
  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800386c:	b2db      	uxtb	r3, r3
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800388a:	e15a      	b.n	8003b42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	2101      	movs	r1, #1
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	4013      	ands	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 814c 	beq.w	8003b3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d00b      	beq.n	80038c4 <HAL_GPIO_Init+0x48>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d007      	beq.n	80038c4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038b8:	2b11      	cmp	r3, #17
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b12      	cmp	r3, #18
 80038c2:	d130      	bne.n	8003926 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	2203      	movs	r2, #3
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038fa:	2201      	movs	r2, #1
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	f003 0201 	and.w	r2, r3, #1
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_Init+0xea>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b12      	cmp	r3, #18
 8003964:	d123      	bne.n	80039ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	08da      	lsrs	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3208      	adds	r2, #8
 800396e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	08da      	lsrs	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3208      	adds	r2, #8
 80039a8:	6939      	ldr	r1, [r7, #16]
 80039aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0203 	and.w	r2, r3, #3
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80a6 	beq.w	8003b3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f0:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <HAL_GPIO_Init+0x2e4>)
 80039f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f4:	4a5a      	ldr	r2, [pc, #360]	; (8003b60 <HAL_GPIO_Init+0x2e4>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6613      	str	r3, [r2, #96]	; 0x60
 80039fc:	4b58      	ldr	r3, [pc, #352]	; (8003b60 <HAL_GPIO_Init+0x2e4>)
 80039fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a08:	4a56      	ldr	r2, [pc, #344]	; (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	3302      	adds	r3, #2
 8003a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	220f      	movs	r2, #15
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a32:	d01f      	beq.n	8003a74 <HAL_GPIO_Init+0x1f8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a4c      	ldr	r2, [pc, #304]	; (8003b68 <HAL_GPIO_Init+0x2ec>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d019      	beq.n	8003a70 <HAL_GPIO_Init+0x1f4>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a4b      	ldr	r2, [pc, #300]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <HAL_GPIO_Init+0x1f0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a4a      	ldr	r2, [pc, #296]	; (8003b70 <HAL_GPIO_Init+0x2f4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00d      	beq.n	8003a68 <HAL_GPIO_Init+0x1ec>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a49      	ldr	r2, [pc, #292]	; (8003b74 <HAL_GPIO_Init+0x2f8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d007      	beq.n	8003a64 <HAL_GPIO_Init+0x1e8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a48      	ldr	r2, [pc, #288]	; (8003b78 <HAL_GPIO_Init+0x2fc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_GPIO_Init+0x1e4>
 8003a5c:	2305      	movs	r3, #5
 8003a5e:	e00a      	b.n	8003a76 <HAL_GPIO_Init+0x1fa>
 8003a60:	2306      	movs	r3, #6
 8003a62:	e008      	b.n	8003a76 <HAL_GPIO_Init+0x1fa>
 8003a64:	2304      	movs	r3, #4
 8003a66:	e006      	b.n	8003a76 <HAL_GPIO_Init+0x1fa>
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e004      	b.n	8003a76 <HAL_GPIO_Init+0x1fa>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e002      	b.n	8003a76 <HAL_GPIO_Init+0x1fa>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_GPIO_Init+0x1fa>
 8003a74:	2300      	movs	r3, #0
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	f002 0203 	and.w	r2, r2, #3
 8003a7c:	0092      	lsls	r2, r2, #2
 8003a7e:	4093      	lsls	r3, r2
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a86:	4937      	ldr	r1, [pc, #220]	; (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a94:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ab8:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ae2:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae8:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b0c:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b12:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b36:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f47f ae9d 	bne.w	800388c <HAL_GPIO_Init+0x10>
  }
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40010000 	.word	0x40010000
 8003b68:	48000400 	.word	0x48000400
 8003b6c:	48000800 	.word	0x48000800
 8003b70:	48000c00 	.word	0x48000c00
 8003b74:	48001000 	.word	0x48001000
 8003b78:	48001400 	.word	0x48001400
 8003b7c:	40010400 	.word	0x40010400

08003b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	887b      	ldrh	r3, [r7, #2]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	e001      	b.n	8003ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bc0:	787b      	ldrb	r3, [r7, #1]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bc6:	887a      	ldrh	r2, [r7, #2]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bcc:	e002      	b.n	8003bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bf2:	887a      	ldrh	r2, [r7, #2]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	041a      	lsls	r2, r3, #16
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	43d9      	mvns	r1, r3
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	400b      	ands	r3, r1
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	619a      	str	r2, [r3, #24]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e081      	b.n	8003d2a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fd6a 	bl	8001714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d107      	bne.n	8003c8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	e006      	b.n	8003c9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d104      	bne.n	8003cae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	ea42 0103 	orr.w	r1, r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	021a      	lsls	r2, r3, #8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69d9      	ldr	r1, [r3, #28]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	460b      	mov	r3, r1
 8003d42:	817b      	strh	r3, [r7, #10]
 8003d44:	4613      	mov	r3, r2
 8003d46:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d153      	bne.n	8003dfc <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d62:	d101      	bne.n	8003d68 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
 8003d66:	e04a      	b.n	8003dfe <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_I2C_Master_Transmit_IT+0x42>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e043      	b.n	8003dfe <HAL_I2C_Master_Transmit_IT+0xca>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2221      	movs	r2, #33	; 0x21
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2210      	movs	r2, #16
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	893a      	ldrh	r2, [r7, #8]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_I2C_Master_Transmit_IT+0xd8>)
 8003daa:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2bff      	cmp	r3, #255	; 0xff
 8003db4:	d906      	bls.n	8003dc4 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	22ff      	movs	r2, #255	; 0xff
 8003dba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e007      	b.n	8003dd4 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	8979      	ldrh	r1, [r7, #10]
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f001 f98a 	bl	80050fc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003df0:	2101      	movs	r1, #1
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f001 f9b0 	bl	8005158 <I2C_Enable_IRQ>

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	ffff0000 	.word	0xffff0000
 8003e0c:	08003ff9 	.word	0x08003ff9
 8003e10:	80002000 	.word	0x80002000

08003e14 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	460b      	mov	r3, r1
 8003e22:	817b      	strh	r3, [r7, #10]
 8003e24:	4613      	mov	r3, r2
 8003e26:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d153      	bne.n	8003edc <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e42:	d101      	bne.n	8003e48 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	e04a      	b.n	8003ede <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Master_Receive_IT+0x42>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e043      	b.n	8003ede <HAL_I2C_Master_Receive_IT+0xca>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2222      	movs	r2, #34	; 0x22
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	893a      	ldrh	r2, [r7, #8]
 8003e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <HAL_I2C_Master_Receive_IT+0xd4>)
 8003e84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a18      	ldr	r2, [pc, #96]	; (8003eec <HAL_I2C_Master_Receive_IT+0xd8>)
 8003e8a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2bff      	cmp	r3, #255	; 0xff
 8003e94:	d906      	bls.n	8003ea4 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	22ff      	movs	r2, #255	; 0xff
 8003e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e007      	b.n	8003eb4 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	8979      	ldrh	r1, [r7, #10]
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <HAL_I2C_Master_Receive_IT+0xdc>)
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f001 f91a 	bl	80050fc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f001 f940 	bl	8005158 <I2C_Enable_IRQ>

    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	ffff0000 	.word	0xffff0000
 8003eec:	08003ff9 	.word	0x08003ff9
 8003ef0:	80002400 	.word	0x80002400

08003ef4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
 8003f50:	4613      	mov	r3, r2
 8003f52:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd2:	b2db      	uxtb	r3, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <I2C_Master_ISR_IT+0x1e>
 8004012:	2302      	movs	r3, #2
 8004014:	e114      	b.n	8004240 <I2C_Master_ISR_IT+0x248>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d013      	beq.n	8004052 <I2C_Master_ISR_IT+0x5a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00d      	beq.n	8004052 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2210      	movs	r2, #16
 800403c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f043 0204 	orr.w	r2, r3, #4
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f001 f813 	bl	8005076 <I2C_Flush_TXDR>
 8004050:	e0e1      	b.n	8004216 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d023      	beq.n	80040a6 <I2C_Master_ISR_IT+0xae>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01d      	beq.n	80040a6 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f023 0304 	bic.w	r3, r3, #4
 8004070:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a4:	e0b7      	b.n	8004216 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01e      	beq.n	80040f0 <I2C_Master_ISR_IT+0xf8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d018      	beq.n	80040f0 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ee:	e092      	b.n	8004216 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	09db      	lsrs	r3, r3, #7
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d05d      	beq.n	80041b8 <I2C_Master_ISR_IT+0x1c0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	099b      	lsrs	r3, r3, #6
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d057      	beq.n	80041b8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d040      	beq.n	8004194 <I2C_Master_ISR_IT+0x19c>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d13c      	bne.n	8004194 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004126:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	2bff      	cmp	r3, #255	; 0xff
 8004130:	d90e      	bls.n	8004150 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	22ff      	movs	r2, #255	; 0xff
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	b2da      	uxtb	r2, r3
 800413e:	8a79      	ldrh	r1, [r7, #18]
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 ffd7 	bl	80050fc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800414e:	e032      	b.n	80041b6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004162:	d00b      	beq.n	800417c <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	b2da      	uxtb	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	8a79      	ldrh	r1, [r7, #18]
 8004170:	2000      	movs	r0, #0
 8004172:	9000      	str	r0, [sp, #0]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 ffc1 	bl	80050fc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800417a:	e01c      	b.n	80041b6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	b2da      	uxtb	r2, r3
 8004182:	8a79      	ldrh	r1, [r7, #18]
 8004184:	2300      	movs	r3, #0
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 ffb5 	bl	80050fc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004192:	e010      	b.n	80041b6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041a2:	d003      	beq.n	80041ac <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fba9 	bl	80048fc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041aa:	e034      	b.n	8004216 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80041ac:	2140      	movs	r1, #64	; 0x40
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fe6a 	bl	8004e88 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041b4:	e02f      	b.n	8004216 <I2C_Master_ISR_IT+0x21e>
 80041b6:	e02e      	b.n	8004216 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d028      	beq.n	8004216 <I2C_Master_ISR_IT+0x21e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d022      	beq.n	8004216 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d119      	bne.n	800420e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041e8:	d015      	beq.n	8004216 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041f2:	d108      	bne.n	8004206 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	e007      	b.n	8004216 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fb78 	bl	80048fc <I2C_ITMasterSeqCplt>
 800420c:	e003      	b.n	8004216 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800420e:	2140      	movs	r1, #64	; 0x40
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 fe39 	bl	8004e88 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <I2C_Master_ISR_IT+0x23e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800422e:	6979      	ldr	r1, [r7, #20]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fbff 	bl	8004a34 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <I2C_Slave_ISR_IT+0x24>
 8004268:	2302      	movs	r3, #2
 800426a:	e0ec      	b.n	8004446 <I2C_Slave_ISR_IT+0x1fe>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <I2C_Slave_ISR_IT+0x4c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800428c:	6939      	ldr	r1, [r7, #16]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fc9a 	bl	8004bc8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d04d      	beq.n	800433c <I2C_Slave_ISR_IT+0xf4>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d047      	beq.n	800433c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d128      	bne.n	8004308 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b28      	cmp	r3, #40	; 0x28
 80042c0:	d108      	bne.n	80042d4 <I2C_Slave_ISR_IT+0x8c>
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042c8:	d104      	bne.n	80042d4 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80042ca:	6939      	ldr	r1, [r7, #16]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 fd85 	bl	8004ddc <I2C_ITListenCplt>
 80042d2:	e032      	b.n	800433a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b29      	cmp	r3, #41	; 0x29
 80042de:	d10e      	bne.n	80042fe <I2C_Slave_ISR_IT+0xb6>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042e6:	d00a      	beq.n	80042fe <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2210      	movs	r2, #16
 80042ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fec0 	bl	8005076 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fb3d 	bl	8004976 <I2C_ITSlaveSeqCplt>
 80042fc:	e01d      	b.n	800433a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2210      	movs	r2, #16
 8004304:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004306:	e096      	b.n	8004436 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2210      	movs	r2, #16
 800430e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	f043 0204 	orr.w	r2, r3, #4
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d004      	beq.n	800432c <I2C_Slave_ISR_IT+0xe4>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004328:	f040 8085 	bne.w	8004436 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	4619      	mov	r1, r3
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fda8 	bl	8004e88 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004338:	e07d      	b.n	8004436 <I2C_Slave_ISR_IT+0x1ee>
 800433a:	e07c      	b.n	8004436 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	089b      	lsrs	r3, r3, #2
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d030      	beq.n	80043aa <I2C_Slave_ISR_IT+0x162>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02a      	beq.n	80043aa <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d018      	beq.n	8004390 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d14f      	bne.n	800443a <I2C_Slave_ISR_IT+0x1f2>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a0:	d04b      	beq.n	800443a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fae7 	bl	8004976 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80043a8:	e047      	b.n	800443a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	08db      	lsrs	r3, r3, #3
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	08db      	lsrs	r3, r3, #3
 80043ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80043c2:	6939      	ldr	r1, [r7, #16]
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fa15 	bl	80047f4 <I2C_ITAddrCplt>
 80043ca:	e037      	b.n	800443c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d031      	beq.n	800443c <I2C_Slave_ISR_IT+0x1f4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02b      	beq.n	800443c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d018      	beq.n	8004420 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	; 0x28
 800441e:	e00d      	b.n	800443c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004426:	d002      	beq.n	800442e <I2C_Slave_ISR_IT+0x1e6>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 faa1 	bl	8004976 <I2C_ITSlaveSeqCplt>
 8004434:	e002      	b.n	800443c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004436:	bf00      	nop
 8004438:	e000      	b.n	800443c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800443a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b088      	sub	sp, #32
 8004452:	af02      	add	r7, sp, #8
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <I2C_Master_ISR_DMA+0x1a>
 8004464:	2302      	movs	r3, #2
 8004466:	e0e1      	b.n	800462c <I2C_Master_ISR_DMA+0x1de>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d017      	beq.n	80044ac <I2C_Master_ISR_DMA+0x5e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d011      	beq.n	80044ac <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2210      	movs	r2, #16
 800448e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	f043 0204 	orr.w	r2, r3, #4
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800449c:	2120      	movs	r1, #32
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fe5a 	bl	8005158 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fde6 	bl	8005076 <I2C_Flush_TXDR>
 80044aa:	e0ba      	b.n	8004622 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	09db      	lsrs	r3, r3, #7
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d072      	beq.n	800459e <I2C_Master_ISR_DMA+0x150>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	099b      	lsrs	r3, r3, #6
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d06c      	beq.n	800459e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d04e      	beq.n	800457c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ea:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2bff      	cmp	r3, #255	; 0xff
 80044f4:	d906      	bls.n	8004504 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	22ff      	movs	r2, #255	; 0xff
 80044fa:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80044fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e010      	b.n	8004526 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004516:	d003      	beq.n	8004520 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e002      	b.n	8004526 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004524:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	b2da      	uxtb	r2, r3
 800452c:	8a79      	ldrh	r1, [r7, #18]
 800452e:	2300      	movs	r3, #0
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fde1 	bl	80050fc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b22      	cmp	r3, #34	; 0x22
 8004556:	d108      	bne.n	800456a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004566:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004568:	e05b      	b.n	8004622 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004578:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800457a:	e052      	b.n	8004622 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800458a:	d003      	beq.n	8004594 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f9b5 	bl	80048fc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004592:	e046      	b.n	8004622 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004594:	2140      	movs	r1, #64	; 0x40
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fc76 	bl	8004e88 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800459c:	e041      	b.n	8004622 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d029      	beq.n	80045fe <I2C_Master_ISR_DMA+0x1b0>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	099b      	lsrs	r3, r3, #6
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d023      	beq.n	80045fe <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d119      	bne.n	80045f4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ce:	d027      	beq.n	8004620 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045d8:	d108      	bne.n	80045ec <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80045ea:	e019      	b.n	8004620 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f985 	bl	80048fc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80045f2:	e015      	b.n	8004620 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80045f4:	2140      	movs	r1, #64	; 0x40
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fc46 	bl	8004e88 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80045fc:	e010      	b.n	8004620 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <I2C_Master_ISR_DMA+0x1d4>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fa0b 	bl	8004a34 <I2C_ITMasterCplt>
 800461e:	e000      	b.n	8004622 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004620:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <I2C_Slave_ISR_DMA+0x24>
 8004654:	2302      	movs	r3, #2
 8004656:	e0c9      	b.n	80047ec <I2C_Slave_ISR_DMA+0x1b8>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <I2C_Slave_ISR_DMA+0x4c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 faa4 	bl	8004bc8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 809a 	beq.w	80047c2 <I2C_Slave_ISR_DMA+0x18e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8093 	beq.w	80047c2 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	0b9b      	lsrs	r3, r3, #14
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	0bdb      	lsrs	r3, r3, #15
 80046ac:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d07f      	beq.n	80047b4 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00d      	beq.n	80046d8 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	0bdb      	lsrs	r3, r3, #15
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80046d4:	2301      	movs	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	0b9b      	lsrs	r3, r3, #14
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80046f8:	2301      	movs	r3, #1
 80046fa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d128      	bne.n	8004754 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b28      	cmp	r3, #40	; 0x28
 800470c:	d108      	bne.n	8004720 <I2C_Slave_ISR_DMA+0xec>
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004714:	d104      	bne.n	8004720 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fb5f 	bl	8004ddc <I2C_ITListenCplt>
 800471e:	e048      	b.n	80047b2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b29      	cmp	r3, #41	; 0x29
 800472a:	d10e      	bne.n	800474a <I2C_Slave_ISR_DMA+0x116>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004732:	d00a      	beq.n	800474a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2210      	movs	r2, #16
 800473a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fc9a 	bl	8005076 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f917 	bl	8004976 <I2C_ITSlaveSeqCplt>
 8004748:	e033      	b.n	80047b2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2210      	movs	r2, #16
 8004750:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004752:	e034      	b.n	80047be <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2210      	movs	r2, #16
 800475a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	f043 0204 	orr.w	r2, r3, #4
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <I2C_Slave_ISR_DMA+0x14a>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800477c:	d11f      	bne.n	80047be <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800477e:	7dfb      	ldrb	r3, [r7, #23]
 8004780:	2b21      	cmp	r3, #33	; 0x21
 8004782:	d002      	beq.n	800478a <I2C_Slave_ISR_DMA+0x156>
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	2b29      	cmp	r3, #41	; 0x29
 8004788:	d103      	bne.n	8004792 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2221      	movs	r2, #33	; 0x21
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
 8004790:	e008      	b.n	80047a4 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b22      	cmp	r3, #34	; 0x22
 8004796:	d002      	beq.n	800479e <I2C_Slave_ISR_DMA+0x16a>
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	2b2a      	cmp	r3, #42	; 0x2a
 800479c:	d102      	bne.n	80047a4 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2222      	movs	r2, #34	; 0x22
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	4619      	mov	r1, r3
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fb6c 	bl	8004e88 <I2C_ITError>
      if (treatdmanack == 1U)
 80047b0:	e005      	b.n	80047be <I2C_Slave_ISR_DMA+0x18a>
 80047b2:	e004      	b.n	80047be <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2210      	movs	r2, #16
 80047ba:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80047bc:	e011      	b.n	80047e2 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80047be:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80047c0:	e00f      	b.n	80047e2 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	08db      	lsrs	r3, r3, #3
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <I2C_Slave_ISR_DMA+0x1ae>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	08db      	lsrs	r3, r3, #3
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f809 	bl	80047f4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800480a:	2b28      	cmp	r3, #40	; 0x28
 800480c:	d16a      	bne.n	80048e4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	b29b      	uxth	r3, r3
 8004828:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800482c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004848:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d138      	bne.n	80048c4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004852:	897b      	ldrh	r3, [r7, #10]
 8004854:	09db      	lsrs	r3, r3, #7
 8004856:	b29a      	uxth	r2, r3
 8004858:	89bb      	ldrh	r3, [r7, #12]
 800485a:	4053      	eors	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	f003 0306 	and.w	r3, r3, #6
 8004862:	2b00      	cmp	r3, #0
 8004864:	d11c      	bne.n	80048a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004866:	897b      	ldrh	r3, [r7, #10]
 8004868:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004878:	2b02      	cmp	r3, #2
 800487a:	d13b      	bne.n	80048f4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2208      	movs	r2, #8
 8004888:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004892:	89ba      	ldrh	r2, [r7, #12]
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fb53 	bl	8003f44 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800489e:	e029      	b.n	80048f4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80048a0:	893b      	ldrh	r3, [r7, #8]
 80048a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fcb9 	bl	8005220 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048b6:	89ba      	ldrh	r2, [r7, #12]
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fb41 	bl	8003f44 <HAL_I2C_AddrCallback>
}
 80048c2:	e017      	b.n	80048f4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fca9 	bl	8005220 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048d6:	89ba      	ldrh	r2, [r7, #12]
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	4619      	mov	r1, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff fb31 	bl	8003f44 <HAL_I2C_AddrCallback>
}
 80048e2:	e007      	b.n	80048f4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2208      	movs	r2, #8
 80048ea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b21      	cmp	r3, #33	; 0x21
 8004916:	d115      	bne.n	8004944 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2211      	movs	r2, #17
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800492c:	2101      	movs	r1, #1
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fc76 	bl	8005220 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff fad9 	bl	8003ef4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004942:	e014      	b.n	800496e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2212      	movs	r2, #18
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004958:	2102      	movs	r1, #2
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fc60 	bl	8005220 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff facd 	bl	8003f08 <HAL_I2C_MasterRxCpltCallback>
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	0b9b      	lsrs	r3, r3, #14
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e00d      	b.n	80049c8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	0bdb      	lsrs	r3, r3, #15
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049c6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b29      	cmp	r3, #41	; 0x29
 80049d2:	d112      	bne.n	80049fa <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2228      	movs	r2, #40	; 0x28
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2221      	movs	r2, #33	; 0x21
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049e2:	2101      	movs	r1, #1
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fc1b 	bl	8005220 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7ff fa92 	bl	8003f1c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80049f8:	e017      	b.n	8004a2a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b2a      	cmp	r3, #42	; 0x2a
 8004a04:	d111      	bne.n	8004a2a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2228      	movs	r2, #40	; 0x28
 8004a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2222      	movs	r2, #34	; 0x22
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a14:	2102      	movs	r1, #2
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fc02 	bl	8005220 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fa83 	bl	8003f30 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2220      	movs	r2, #32
 8004a48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b21      	cmp	r3, #33	; 0x21
 8004a54:	d107      	bne.n	8004a66 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a56:	2101      	movs	r1, #1
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fbe1 	bl	8005220 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2211      	movs	r2, #17
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
 8004a64:	e00c      	b.n	8004a80 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b22      	cmp	r3, #34	; 0x22
 8004a70:	d106      	bne.n	8004a80 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a72:	2102      	movs	r1, #2
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fbd3 	bl	8005220 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2212      	movs	r2, #18
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b4d      	ldr	r3, [pc, #308]	; (8004bc0 <I2C_ITMasterCplt+0x18c>)
 8004a8c:	400b      	ands	r3, r1
 8004a8e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a4a      	ldr	r2, [pc, #296]	; (8004bc4 <I2C_ITMasterCplt+0x190>)
 8004a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2210      	movs	r2, #16
 8004aae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab4:	f043 0204 	orr.w	r2, r3, #4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b60      	cmp	r3, #96	; 0x60
 8004ac6:	d10b      	bne.n	8004ae0 <I2C_ITMasterCplt+0xac>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	089b      	lsrs	r3, r3, #2
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004ade:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fac8 	bl	8005076 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b60      	cmp	r3, #96	; 0x60
 8004af6:	d002      	beq.n	8004afe <I2C_ITMasterCplt+0xca>
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d006      	beq.n	8004b0c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	4619      	mov	r1, r3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f9bf 	bl	8004e88 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b0a:	e054      	b.n	8004bb6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b21      	cmp	r3, #33	; 0x21
 8004b16:	d124      	bne.n	8004b62 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d10b      	bne.n	8004b4a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff fa16 	bl	8003f74 <HAL_I2C_MemTxCpltCallback>
}
 8004b48:	e035      	b.n	8004bb6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff f9ca 	bl	8003ef4 <HAL_I2C_MasterTxCpltCallback>
}
 8004b60:	e029      	b.n	8004bb6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b22      	cmp	r3, #34	; 0x22
 8004b6c:	d123      	bne.n	8004bb6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d10b      	bne.n	8004ba0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff f9f5 	bl	8003f88 <HAL_I2C_MemRxCpltCallback>
}
 8004b9e:	e00a      	b.n	8004bb6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff f9a9 	bl	8003f08 <HAL_I2C_MasterRxCpltCallback>
}
 8004bb6:	bf00      	nop
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	fe00e800 	.word	0xfe00e800
 8004bc4:	ffff0000 	.word	0xffff0000

08004bc8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2220      	movs	r2, #32
 8004bec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b21      	cmp	r3, #33	; 0x21
 8004bf2:	d002      	beq.n	8004bfa <I2C_ITSlaveCplt+0x32>
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b29      	cmp	r3, #41	; 0x29
 8004bf8:	d108      	bne.n	8004c0c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004bfa:	f248 0101 	movw	r1, #32769	; 0x8001
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fb0e 	bl	8005220 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2221      	movs	r2, #33	; 0x21
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
 8004c0a:	e00d      	b.n	8004c28 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2b22      	cmp	r3, #34	; 0x22
 8004c10:	d002      	beq.n	8004c18 <I2C_ITSlaveCplt+0x50>
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	2b2a      	cmp	r3, #42	; 0x2a
 8004c16:	d107      	bne.n	8004c28 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c18:	f248 0102 	movw	r1, #32770	; 0x8002
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 faff 	bl	8005220 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2222      	movs	r2, #34	; 0x22
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c36:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b64      	ldr	r3, [pc, #400]	; (8004dd4 <I2C_ITSlaveCplt+0x20c>)
 8004c44:	400b      	ands	r3, r1
 8004c46:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fa14 	bl	8005076 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	0b9b      	lsrs	r3, r3, #14
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d013      	beq.n	8004c82 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d020      	beq.n	8004cb4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c80:	e018      	b.n	8004cb4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	0bdb      	lsrs	r3, r3, #15
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d012      	beq.n	8004cb4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c9c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d006      	beq.n	8004cb4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	089b      	lsrs	r3, r3, #2
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f023 0304 	bic.w	r3, r3, #4
 8004cc6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00c      	beq.n	8004d02 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d10:	f043 0204 	orr.w	r2, r3, #4
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f8a7 	bl	8004e88 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b28      	cmp	r3, #40	; 0x28
 8004d44:	d141      	bne.n	8004dca <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d46:	6979      	ldr	r1, [r7, #20]
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f847 	bl	8004ddc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d4e:	e03c      	b.n	8004dca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d58:	d014      	beq.n	8004d84 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff fe0b 	bl	8004976 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <I2C_ITSlaveCplt+0x210>)
 8004d64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff f8ef 	bl	8003f60 <HAL_I2C_ListenCpltCallback>
}
 8004d82:	e022      	b.n	8004dca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b22      	cmp	r3, #34	; 0x22
 8004d8e:	d10e      	bne.n	8004dae <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff f8c2 	bl	8003f30 <HAL_I2C_SlaveRxCpltCallback>
}
 8004dac:	e00d      	b.n	8004dca <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff f8a9 	bl	8003f1c <HAL_I2C_SlaveTxCpltCallback>
}
 8004dca:	bf00      	nop
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	fe00e800 	.word	0xfe00e800
 8004dd8:	ffff0000 	.word	0xffff0000

08004ddc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <I2C_ITListenCplt+0xa8>)
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	089b      	lsrs	r3, r3, #2
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d022      	beq.n	8004e5a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d012      	beq.n	8004e5a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	f043 0204 	orr.w	r2, r3, #4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e5a:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f9de 	bl	8005220 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2210      	movs	r2, #16
 8004e6a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff f873 	bl	8003f60 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	ffff0000 	.word	0xffff0000

08004e88 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a5d      	ldr	r2, [pc, #372]	; (800501c <I2C_ITError+0x194>)
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2b28      	cmp	r3, #40	; 0x28
 8004ebe:	d005      	beq.n	8004ecc <I2C_ITError+0x44>
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b29      	cmp	r3, #41	; 0x29
 8004ec4:	d002      	beq.n	8004ecc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eca:	d10b      	bne.n	8004ee4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ecc:	2103      	movs	r1, #3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f9a6 	bl	8005220 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2228      	movs	r2, #40	; 0x28
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a50      	ldr	r2, [pc, #320]	; (8005020 <I2C_ITError+0x198>)
 8004ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ee2:	e011      	b.n	8004f08 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ee4:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f999 	bl	8005220 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b60      	cmp	r3, #96	; 0x60
 8004ef8:	d003      	beq.n	8004f02 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d039      	beq.n	8004f8a <I2C_ITError+0x102>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b11      	cmp	r3, #17
 8004f1a:	d002      	beq.n	8004f22 <I2C_ITError+0x9a>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b21      	cmp	r3, #33	; 0x21
 8004f20:	d133      	bne.n	8004f8a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f30:	d107      	bne.n	8004f42 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f40:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fc89 	bl	800385e <HAL_DMA_GetState>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d017      	beq.n	8004f82 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	4a33      	ldr	r2, [pc, #204]	; (8005024 <I2C_ITError+0x19c>)
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe fc12 	bl	8003790 <HAL_DMA_Abort_IT>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d04d      	beq.n	800500e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f80:	e045      	b.n	800500e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f850 	bl	8005028 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f88:	e041      	b.n	800500e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d039      	beq.n	8005006 <I2C_ITError+0x17e>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b12      	cmp	r3, #18
 8004f96:	d002      	beq.n	8004f9e <I2C_ITError+0x116>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b22      	cmp	r3, #34	; 0x22
 8004f9c:	d133      	bne.n	8005006 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fac:	d107      	bne.n	8004fbe <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fbc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe fc4b 	bl	800385e <HAL_DMA_GetState>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d017      	beq.n	8004ffe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	4a14      	ldr	r2, [pc, #80]	; (8005024 <I2C_ITError+0x19c>)
 8004fd4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fbd4 	bl	8003790 <HAL_DMA_Abort_IT>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d011      	beq.n	8005012 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ffc:	e009      	b.n	8005012 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f812 	bl	8005028 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005004:	e005      	b.n	8005012 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f80e 	bl	8005028 <I2C_TreatErrorCallback>
  }
}
 800500c:	e002      	b.n	8005014 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005012:	bf00      	nop
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	ffff0000 	.word	0xffff0000
 8005020:	08004249 	.word	0x08004249
 8005024:	080050bf 	.word	0x080050bf

08005028 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b60      	cmp	r3, #96	; 0x60
 800503a:	d10e      	bne.n	800505a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fe ffac 	bl	8003fb0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005058:	e009      	b.n	800506e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fe ff97 	bl	8003f9c <HAL_I2C_ErrorCallback>
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b02      	cmp	r3, #2
 800508a:	d103      	bne.n	8005094 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2200      	movs	r2, #0
 8005092:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d007      	beq.n	80050b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0201 	orr.w	r2, r2, #1
 80050b0:	619a      	str	r2, [r3, #24]
  }
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	2200      	movs	r2, #0
 80050da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	2200      	movs	r2, #0
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff ff9b 	bl	8005028 <I2C_TreatErrorCallback>
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	460b      	mov	r3, r1
 8005108:	817b      	strh	r3, [r7, #10]
 800510a:	4613      	mov	r3, r2
 800510c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	0d5b      	lsrs	r3, r3, #21
 8005118:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <I2C_TransferConfig+0x58>)
 800511e:	430b      	orrs	r3, r1
 8005120:	43db      	mvns	r3, r3
 8005122:	ea02 0103 	and.w	r1, r2, r3
 8005126:	897b      	ldrh	r3, [r7, #10]
 8005128:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800512c:	7a7b      	ldrb	r3, [r7, #9]
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	431a      	orrs	r2, r3
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	431a      	orrs	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	03ff63ff 	.word	0x03ff63ff

08005158 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	4a2a      	ldr	r2, [pc, #168]	; (8005218 <I2C_Enable_IRQ+0xc0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005176:	4a29      	ldr	r2, [pc, #164]	; (800521c <I2C_Enable_IRQ+0xc4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d11d      	bne.n	80051b8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800517c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005180:	2b00      	cmp	r3, #0
 8005182:	da03      	bge.n	800518c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800518a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800518c:	887b      	ldrh	r3, [r7, #2]
 800518e:	2b10      	cmp	r3, #16
 8005190:	d103      	bne.n	800519a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005198:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	2b20      	cmp	r3, #32
 800519e:	d103      	bne.n	80051a8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80051a8:	887b      	ldrh	r3, [r7, #2]
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d125      	bne.n	80051fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80051b6:	e020      	b.n	80051fa <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80051b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	da03      	bge.n	80051c8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80051c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80051c8:	887b      	ldrh	r3, [r7, #2]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80051d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80051da:	887b      	ldrh	r3, [r7, #2]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80051ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80051ec:	887b      	ldrh	r3, [r7, #2]
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d103      	bne.n	80051fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f043 0320 	orr.w	r3, r3, #32
 80051f8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	430a      	orrs	r2, r1
 8005208:	601a      	str	r2, [r3, #0]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	0800444f 	.word	0x0800444f
 800521c:	08004635 	.word	0x08004635

08005220 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005230:	887b      	ldrh	r3, [r7, #2]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00f      	beq.n	800525a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005240:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800524e:	2b28      	cmp	r3, #40	; 0x28
 8005250:	d003      	beq.n	800525a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005258:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800525a:	887b      	ldrh	r3, [r7, #2]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00f      	beq.n	8005284 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800526a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005278:	2b28      	cmp	r3, #40	; 0x28
 800527a:	d003      	beq.n	8005284 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005282:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005284:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005288:	2b00      	cmp	r3, #0
 800528a:	da03      	bge.n	8005294 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005292:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005294:	887b      	ldrh	r3, [r7, #2]
 8005296:	2b10      	cmp	r3, #16
 8005298:	d103      	bne.n	80052a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052a2:	887b      	ldrh	r3, [r7, #2]
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d103      	bne.n	80052b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f043 0320 	orr.w	r3, r3, #32
 80052ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80052b0:	887b      	ldrh	r3, [r7, #2]
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d103      	bne.n	80052be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	43da      	mvns	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	400a      	ands	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]
}
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d138      	bne.n	8005364 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e032      	b.n	8005366 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2224      	movs	r2, #36	; 0x24
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800532e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6819      	ldr	r1, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	e000      	b.n	8005366 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005364:	2302      	movs	r3, #2
  }
}
 8005366:	4618      	mov	r0, r3
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b20      	cmp	r3, #32
 8005386:	d139      	bne.n	80053fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005392:	2302      	movs	r3, #2
 8005394:	e033      	b.n	80053fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2224      	movs	r2, #36	; 0x24
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e000      	b.n	80053fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053fc:	2302      	movs	r3, #2
  }
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800540a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540c:	b08b      	sub	sp, #44	; 0x2c
 800540e:	af06      	add	r7, sp, #24
 8005410:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0d7      	b.n	80055cc <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fc f9f7 	bl	8001824 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2203      	movs	r2, #3
 800543a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f001 fecc 	bl	80071e0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005448:	2300      	movs	r3, #0
 800544a:	73fb      	strb	r3, [r7, #15]
 800544c:	e04c      	b.n	80054e8 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	440b      	add	r3, r1
 800545e:	3301      	adds	r3, #1
 8005460:	2201      	movs	r2, #1
 8005462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	7bfa      	ldrb	r2, [r7, #15]
 8005476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005478:	7bfa      	ldrb	r2, [r7, #15]
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	b298      	uxth	r0, r3
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	440b      	add	r3, r1
 800548a:	3336      	adds	r3, #54	; 0x36
 800548c:	4602      	mov	r2, r0
 800548e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	440b      	add	r3, r1
 80054a0:	3303      	adds	r3, #3
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054a6:	7bfa      	ldrb	r2, [r7, #15]
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	440b      	add	r3, r1
 80054b4:	3338      	adds	r3, #56	; 0x38
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80054ba:	7bfa      	ldrb	r2, [r7, #15]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	440b      	add	r3, r1
 80054c8:	333c      	adds	r3, #60	; 0x3c
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054ce:	7bfa      	ldrb	r2, [r7, #15]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	440b      	add	r3, r1
 80054dc:	3340      	adds	r3, #64	; 0x40
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	3301      	adds	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
 80054e8:	7bfa      	ldrb	r2, [r7, #15]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d3ad      	bcc.n	800544e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
 80054f6:	e044      	b.n	8005582 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054f8:	7bfa      	ldrb	r2, [r7, #15]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	440b      	add	r3, r1
 8005506:	f203 1369 	addw	r3, r3, #361	; 0x169
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800550e:	7bfa      	ldrb	r2, [r7, #15]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	440b      	add	r3, r1
 800551c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005520:	7bfa      	ldrb	r2, [r7, #15]
 8005522:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005524:	7bfa      	ldrb	r2, [r7, #15]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	440b      	add	r3, r1
 8005532:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800553a:	7bfa      	ldrb	r2, [r7, #15]
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	440b      	add	r3, r1
 8005548:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005550:	7bfa      	ldrb	r2, [r7, #15]
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	440b      	add	r3, r1
 800555e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005566:	7bfa      	ldrb	r2, [r7, #15]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	440b      	add	r3, r1
 8005574:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	3301      	adds	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
 8005582:	7bfa      	ldrb	r2, [r7, #15]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	d3b5      	bcc.n	80054f8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	687e      	ldr	r6, [r7, #4]
 8005594:	466d      	mov	r5, sp
 8005596:	f106 0410 	add.w	r4, r6, #16
 800559a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800559c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	1d33      	adds	r3, r6, #4
 80055a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055a6:	6838      	ldr	r0, [r7, #0]
 80055a8:	f001 fe35 	bl	8007216 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d102      	bne.n	80055ca <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f805 	bl	80055d4 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800560c:	b29b      	uxth	r3, r3
 800560e:	f043 0302 	orr.w	r3, r3, #2
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d141      	bne.n	80056ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005636:	4b4b      	ldr	r3, [pc, #300]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005642:	d131      	bne.n	80056a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005644:	4b47      	ldr	r3, [pc, #284]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800564a:	4a46      	ldr	r2, [pc, #280]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005650:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005654:	4b43      	ldr	r3, [pc, #268]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800565c:	4a41      	ldr	r2, [pc, #260]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800565e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005662:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005664:	4b40      	ldr	r3, [pc, #256]	; (8005768 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2232      	movs	r2, #50	; 0x32
 800566a:	fb02 f303 	mul.w	r3, r2, r3
 800566e:	4a3f      	ldr	r2, [pc, #252]	; (800576c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	0c9b      	lsrs	r3, r3, #18
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800567a:	e002      	b.n	8005682 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3b01      	subs	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005682:	4b38      	ldr	r3, [pc, #224]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568e:	d102      	bne.n	8005696 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f2      	bne.n	800567c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005696:	4b33      	ldr	r3, [pc, #204]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800569e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a2:	d158      	bne.n	8005756 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e057      	b.n	8005758 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056a8:	4b2e      	ldr	r3, [pc, #184]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ae:	4a2d      	ldr	r2, [pc, #180]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80056b8:	e04d      	b.n	8005756 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c0:	d141      	bne.n	8005746 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056c2:	4b28      	ldr	r3, [pc, #160]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ce:	d131      	bne.n	8005734 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056d0:	4b24      	ldr	r3, [pc, #144]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d6:	4a23      	ldr	r2, [pc, #140]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056e0:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056e8:	4a1e      	ldr	r2, [pc, #120]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056f0:	4b1d      	ldr	r3, [pc, #116]	; (8005768 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2232      	movs	r2, #50	; 0x32
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	4a1c      	ldr	r2, [pc, #112]	; (800576c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	0c9b      	lsrs	r3, r3, #18
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005706:	e002      	b.n	800570e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3b01      	subs	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800570e:	4b15      	ldr	r3, [pc, #84]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571a:	d102      	bne.n	8005722 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f2      	bne.n	8005708 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800572a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572e:	d112      	bne.n	8005756 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e011      	b.n	8005758 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573a:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005740:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005744:	e007      	b.n	8005756 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800574e:	4a05      	ldr	r2, [pc, #20]	; (8005764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005750:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005754:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	40007000 	.word	0x40007000
 8005768:	2000002c 	.word	0x2000002c
 800576c:	431bde83 	.word	0x431bde83

08005770 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a04      	ldr	r2, [pc, #16]	; (800578c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800577a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800577e:	6093      	str	r3, [r2, #8]
}
 8005780:	bf00      	nop
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40007000 	.word	0x40007000

08005790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e308      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d075      	beq.n	800589a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ae:	4ba3      	ldr	r3, [pc, #652]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
 80057b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057b8:	4ba0      	ldr	r3, [pc, #640]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b0c      	cmp	r3, #12
 80057c6:	d102      	bne.n	80057ce <HAL_RCC_OscConfig+0x3e>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d002      	beq.n	80057d4 <HAL_RCC_OscConfig+0x44>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d10b      	bne.n	80057ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d4:	4b99      	ldr	r3, [pc, #612]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d05b      	beq.n	8005898 <HAL_RCC_OscConfig+0x108>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d157      	bne.n	8005898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e2e3      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f4:	d106      	bne.n	8005804 <HAL_RCC_OscConfig+0x74>
 80057f6:	4b91      	ldr	r3, [pc, #580]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a90      	ldr	r2, [pc, #576]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80057fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e01d      	b.n	8005840 <HAL_RCC_OscConfig+0xb0>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800580c:	d10c      	bne.n	8005828 <HAL_RCC_OscConfig+0x98>
 800580e:	4b8b      	ldr	r3, [pc, #556]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a8a      	ldr	r2, [pc, #552]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	4b88      	ldr	r3, [pc, #544]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a87      	ldr	r2, [pc, #540]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e00b      	b.n	8005840 <HAL_RCC_OscConfig+0xb0>
 8005828:	4b84      	ldr	r3, [pc, #528]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a83      	ldr	r2, [pc, #524]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 800582e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	4b81      	ldr	r3, [pc, #516]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a80      	ldr	r2, [pc, #512]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 800583a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800583e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d013      	beq.n	8005870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005848:	f7fc f8de 	bl	8001a08 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005850:	f7fc f8da 	bl	8001a08 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b64      	cmp	r3, #100	; 0x64
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e2a8      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005862:	4b76      	ldr	r3, [pc, #472]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0f0      	beq.n	8005850 <HAL_RCC_OscConfig+0xc0>
 800586e:	e014      	b.n	800589a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fc f8ca 	bl	8001a08 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005878:	f7fc f8c6 	bl	8001a08 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	; 0x64
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e294      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800588a:	4b6c      	ldr	r3, [pc, #432]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f0      	bne.n	8005878 <HAL_RCC_OscConfig+0xe8>
 8005896:	e000      	b.n	800589a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d075      	beq.n	8005992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a6:	4b65      	ldr	r3, [pc, #404]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 030c 	and.w	r3, r3, #12
 80058ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058b0:	4b62      	ldr	r3, [pc, #392]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	d102      	bne.n	80058c6 <HAL_RCC_OscConfig+0x136>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d002      	beq.n	80058cc <HAL_RCC_OscConfig+0x13c>
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d11f      	bne.n	800590c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058cc:	4b5b      	ldr	r3, [pc, #364]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_OscConfig+0x154>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e267      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e4:	4b55      	ldr	r3, [pc, #340]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	061b      	lsls	r3, r3, #24
 80058f2:	4952      	ldr	r1, [pc, #328]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058f8:	4b51      	ldr	r3, [pc, #324]	; (8005a40 <HAL_RCC_OscConfig+0x2b0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fc f837 	bl	8001970 <HAL_InitTick>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d043      	beq.n	8005990 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e253      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d023      	beq.n	800595c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005914:	4b49      	ldr	r3, [pc, #292]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a48      	ldr	r2, [pc, #288]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 800591a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005920:	f7fc f872 	bl	8001a08 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005928:	f7fc f86e 	bl	8001a08 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e23c      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800593a:	4b40      	ldr	r3, [pc, #256]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005946:	4b3d      	ldr	r3, [pc, #244]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	061b      	lsls	r3, r3, #24
 8005954:	4939      	ldr	r1, [pc, #228]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005956:	4313      	orrs	r3, r2
 8005958:	604b      	str	r3, [r1, #4]
 800595a:	e01a      	b.n	8005992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800595c:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a36      	ldr	r2, [pc, #216]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fc f84e 	bl	8001a08 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005970:	f7fc f84a 	bl	8001a08 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e218      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005982:	4b2e      	ldr	r3, [pc, #184]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f0      	bne.n	8005970 <HAL_RCC_OscConfig+0x1e0>
 800598e:	e000      	b.n	8005992 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005990:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d03c      	beq.n	8005a18 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01c      	beq.n	80059e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a6:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80059a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ac:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b6:	f7fc f827 	bl	8001a08 <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059be:	f7fc f823 	bl	8001a08 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e1f1      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059d0:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80059d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0ef      	beq.n	80059be <HAL_RCC_OscConfig+0x22e>
 80059de:	e01b      	b.n	8005a18 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059e0:	4b16      	ldr	r3, [pc, #88]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80059e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e6:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f0:	f7fc f80a 	bl	8001a08 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059f8:	f7fc f806 	bl	8001a08 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e1d4      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ef      	bne.n	80059f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80ab 	beq.w	8005b7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a26:	2300      	movs	r3, #0
 8005a28:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a2a:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_RCC_OscConfig+0x2b4>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e005      	b.n	8005a46 <HAL_RCC_OscConfig+0x2b6>
 8005a3a:	bf00      	nop
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	20000030 	.word	0x20000030
 8005a44:	2300      	movs	r3, #0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00d      	beq.n	8005a66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4a:	4baf      	ldr	r3, [pc, #700]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4e:	4aae      	ldr	r2, [pc, #696]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a54:	6593      	str	r3, [r2, #88]	; 0x58
 8005a56:	4bac      	ldr	r3, [pc, #688]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a62:	2301      	movs	r3, #1
 8005a64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a66:	4ba9      	ldr	r3, [pc, #676]	; (8005d0c <HAL_RCC_OscConfig+0x57c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d118      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a72:	4ba6      	ldr	r3, [pc, #664]	; (8005d0c <HAL_RCC_OscConfig+0x57c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4aa5      	ldr	r2, [pc, #660]	; (8005d0c <HAL_RCC_OscConfig+0x57c>)
 8005a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a7e:	f7fb ffc3 	bl	8001a08 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a86:	f7fb ffbf 	bl	8001a08 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e18d      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a98:	4b9c      	ldr	r3, [pc, #624]	; (8005d0c <HAL_RCC_OscConfig+0x57c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d108      	bne.n	8005abe <HAL_RCC_OscConfig+0x32e>
 8005aac:	4b96      	ldr	r3, [pc, #600]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab2:	4a95      	ldr	r2, [pc, #596]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005ab4:	f043 0301 	orr.w	r3, r3, #1
 8005ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005abc:	e024      	b.n	8005b08 <HAL_RCC_OscConfig+0x378>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b05      	cmp	r3, #5
 8005ac4:	d110      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x358>
 8005ac6:	4b90      	ldr	r3, [pc, #576]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005acc:	4a8e      	ldr	r2, [pc, #568]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005ace:	f043 0304 	orr.w	r3, r3, #4
 8005ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ad6:	4b8c      	ldr	r3, [pc, #560]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005adc:	4a8a      	ldr	r2, [pc, #552]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ae6:	e00f      	b.n	8005b08 <HAL_RCC_OscConfig+0x378>
 8005ae8:	4b87      	ldr	r3, [pc, #540]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	4a86      	ldr	r2, [pc, #536]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005af8:	4b83      	ldr	r3, [pc, #524]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afe:	4a82      	ldr	r2, [pc, #520]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005b00:	f023 0304 	bic.w	r3, r3, #4
 8005b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d016      	beq.n	8005b3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b10:	f7fb ff7a 	bl	8001a08 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b16:	e00a      	b.n	8005b2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b18:	f7fb ff76 	bl	8001a08 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e142      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b2e:	4b76      	ldr	r3, [pc, #472]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0ed      	beq.n	8005b18 <HAL_RCC_OscConfig+0x388>
 8005b3c:	e015      	b.n	8005b6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3e:	f7fb ff63 	bl	8001a08 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b44:	e00a      	b.n	8005b5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b46:	f7fb ff5f 	bl	8001a08 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e12b      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b5c:	4b6a      	ldr	r3, [pc, #424]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1ed      	bne.n	8005b46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b6a:	7ffb      	ldrb	r3, [r7, #31]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d105      	bne.n	8005b7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b70:	4b65      	ldr	r3, [pc, #404]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b74:	4a64      	ldr	r2, [pc, #400]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d03c      	beq.n	8005c02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01c      	beq.n	8005bca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b90:	4b5d      	ldr	r3, [pc, #372]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b96:	4a5c      	ldr	r2, [pc, #368]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba0:	f7fb ff32 	bl	8001a08 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ba8:	f7fb ff2e 	bl	8001a08 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e0fc      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bba:	4b53      	ldr	r3, [pc, #332]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0ef      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x418>
 8005bc8:	e01b      	b.n	8005c02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bca:	4b4f      	ldr	r3, [pc, #316]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bd0:	4a4d      	ldr	r2, [pc, #308]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bda:	f7fb ff15 	bl	8001a08 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005be2:	f7fb ff11 	bl	8001a08 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e0df      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bf4:	4b44      	ldr	r3, [pc, #272]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1ef      	bne.n	8005be2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 80d3 	beq.w	8005db2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c0c:	4b3e      	ldr	r3, [pc, #248]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 030c 	and.w	r3, r3, #12
 8005c14:	2b0c      	cmp	r3, #12
 8005c16:	f000 808d 	beq.w	8005d34 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d15a      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c22:	4b39      	ldr	r3, [pc, #228]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a38      	ldr	r2, [pc, #224]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2e:	f7fb feeb 	bl	8001a08 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c36:	f7fb fee7 	bl	8001a08 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e0b5      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c48:	4b2f      	ldr	r3, [pc, #188]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1f0      	bne.n	8005c36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c54:	4b2c      	ldr	r3, [pc, #176]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	4b2d      	ldr	r3, [pc, #180]	; (8005d10 <HAL_RCC_OscConfig+0x580>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6a11      	ldr	r1, [r2, #32]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c64:	3a01      	subs	r2, #1
 8005c66:	0112      	lsls	r2, r2, #4
 8005c68:	4311      	orrs	r1, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005c6e:	0212      	lsls	r2, r2, #8
 8005c70:	4311      	orrs	r1, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c76:	0852      	lsrs	r2, r2, #1
 8005c78:	3a01      	subs	r2, #1
 8005c7a:	0552      	lsls	r2, r2, #21
 8005c7c:	4311      	orrs	r1, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c82:	0852      	lsrs	r2, r2, #1
 8005c84:	3a01      	subs	r2, #1
 8005c86:	0652      	lsls	r2, r2, #25
 8005c88:	4311      	orrs	r1, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c8e:	06d2      	lsls	r2, r2, #27
 8005c90:	430a      	orrs	r2, r1
 8005c92:	491d      	ldr	r1, [pc, #116]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c98:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1a      	ldr	r2, [pc, #104]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ca2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ca4:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb0:	f7fb feaa 	bl	8001a08 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb8:	f7fb fea6 	bl	8001a08 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e074      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cca:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0f0      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x528>
 8005cd6:	e06c      	b.n	8005db2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ce2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005ce4:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4a07      	ldr	r2, [pc, #28]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005cf0:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	4a04      	ldr	r2, [pc, #16]	; (8005d08 <HAL_RCC_OscConfig+0x578>)
 8005cf6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d00:	f7fb fe82 	bl	8001a08 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d06:	e00e      	b.n	8005d26 <HAL_RCC_OscConfig+0x596>
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	40007000 	.word	0x40007000
 8005d10:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d14:	f7fb fe78 	bl	8001a08 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e046      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d26:	4b25      	ldr	r3, [pc, #148]	; (8005dbc <HAL_RCC_OscConfig+0x62c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x584>
 8005d32:	e03e      	b.n	8005db2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e039      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <HAL_RCC_OscConfig+0x62c>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f003 0203 	and.w	r2, r3, #3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d12c      	bne.n	8005dae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d123      	bne.n	8005dae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d11b      	bne.n	8005dae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d113      	bne.n	8005dae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	3b01      	subs	r3, #1
 8005d94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d109      	bne.n	8005dae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	3b01      	subs	r3, #1
 8005da8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d001      	beq.n	8005db2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3720      	adds	r7, #32
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40021000 	.word	0x40021000

08005dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e11e      	b.n	8006016 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dd8:	4b91      	ldr	r3, [pc, #580]	; (8006020 <HAL_RCC_ClockConfig+0x260>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d910      	bls.n	8005e08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de6:	4b8e      	ldr	r3, [pc, #568]	; (8006020 <HAL_RCC_ClockConfig+0x260>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f023 020f 	bic.w	r2, r3, #15
 8005dee:	498c      	ldr	r1, [pc, #560]	; (8006020 <HAL_RCC_ClockConfig+0x260>)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df6:	4b8a      	ldr	r3, [pc, #552]	; (8006020 <HAL_RCC_ClockConfig+0x260>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d001      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e106      	b.n	8006016 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d073      	beq.n	8005efc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d129      	bne.n	8005e70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e1c:	4b81      	ldr	r3, [pc, #516]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0f4      	b.n	8006016 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e2c:	f000 f99e 	bl	800616c <RCC_GetSysClockFreqFromPLLSource>
 8005e30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4a7c      	ldr	r2, [pc, #496]	; (8006028 <HAL_RCC_ClockConfig+0x268>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d93f      	bls.n	8005eba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e3a:	4b7a      	ldr	r3, [pc, #488]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d033      	beq.n	8005eba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d12f      	bne.n	8005eba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e5a:	4b72      	ldr	r3, [pc, #456]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e62:	4a70      	ldr	r2, [pc, #448]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e6a:	2380      	movs	r3, #128	; 0x80
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e024      	b.n	8005eba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d107      	bne.n	8005e88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e78:	4b6a      	ldr	r3, [pc, #424]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d109      	bne.n	8005e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0c6      	b.n	8006016 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e88:	4b66      	ldr	r3, [pc, #408]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0be      	b.n	8006016 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005e98:	f000 f8ce 	bl	8006038 <HAL_RCC_GetSysClockFreq>
 8005e9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4a61      	ldr	r2, [pc, #388]	; (8006028 <HAL_RCC_ClockConfig+0x268>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d909      	bls.n	8005eba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ea6:	4b5f      	ldr	r3, [pc, #380]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eae:	4a5d      	ldr	r2, [pc, #372]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005eba:	4b5a      	ldr	r3, [pc, #360]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f023 0203 	bic.w	r2, r3, #3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	4957      	ldr	r1, [pc, #348]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ecc:	f7fb fd9c 	bl	8001a08 <HAL_GetTick>
 8005ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed4:	f7fb fd98 	bl	8001a08 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e095      	b.n	8006016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eea:	4b4e      	ldr	r3, [pc, #312]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 020c 	and.w	r2, r3, #12
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d1eb      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d023      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f14:	4b43      	ldr	r3, [pc, #268]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4a42      	ldr	r2, [pc, #264]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f2c:	4b3d      	ldr	r3, [pc, #244]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f34:	4a3b      	ldr	r2, [pc, #236]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f3c:	4b39      	ldr	r3, [pc, #228]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4936      	ldr	r1, [pc, #216]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	608b      	str	r3, [r1, #8]
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2b80      	cmp	r3, #128	; 0x80
 8005f54:	d105      	bne.n	8005f62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f56:	4b33      	ldr	r3, [pc, #204]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	4a32      	ldr	r2, [pc, #200]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f62:	4b2f      	ldr	r3, [pc, #188]	; (8006020 <HAL_RCC_ClockConfig+0x260>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d21d      	bcs.n	8005fac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f70:	4b2b      	ldr	r3, [pc, #172]	; (8006020 <HAL_RCC_ClockConfig+0x260>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f023 020f 	bic.w	r2, r3, #15
 8005f78:	4929      	ldr	r1, [pc, #164]	; (8006020 <HAL_RCC_ClockConfig+0x260>)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f80:	f7fb fd42 	bl	8001a08 <HAL_GetTick>
 8005f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f86:	e00a      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f88:	f7fb fd3e 	bl	8001a08 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e03b      	b.n	8006016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <HAL_RCC_ClockConfig+0x260>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d1ed      	bne.n	8005f88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	4917      	ldr	r1, [pc, #92]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fd6:	4b13      	ldr	r3, [pc, #76]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	490f      	ldr	r1, [pc, #60]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fea:	f000 f825 	bl	8006038 <HAL_RCC_GetSysClockFreq>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <HAL_RCC_ClockConfig+0x264>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	091b      	lsrs	r3, r3, #4
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	490c      	ldr	r1, [pc, #48]	; (800602c <HAL_RCC_ClockConfig+0x26c>)
 8005ffc:	5ccb      	ldrb	r3, [r1, r3]
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	fa22 f303 	lsr.w	r3, r2, r3
 8006006:	4a0a      	ldr	r2, [pc, #40]	; (8006030 <HAL_RCC_ClockConfig+0x270>)
 8006008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <HAL_RCC_ClockConfig+0x274>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fb fcae 	bl	8001970 <HAL_InitTick>
 8006014:	4603      	mov	r3, r0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40022000 	.word	0x40022000
 8006024:	40021000 	.word	0x40021000
 8006028:	04c4b400 	.word	0x04c4b400
 800602c:	080072d8 	.word	0x080072d8
 8006030:	2000002c 	.word	0x2000002c
 8006034:	20000030 	.word	0x20000030

08006038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800603e:	4b2c      	ldr	r3, [pc, #176]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 030c 	and.w	r3, r3, #12
 8006046:	2b04      	cmp	r3, #4
 8006048:	d102      	bne.n	8006050 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800604a:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800604c:	613b      	str	r3, [r7, #16]
 800604e:	e047      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006050:	4b27      	ldr	r3, [pc, #156]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 030c 	and.w	r3, r3, #12
 8006058:	2b08      	cmp	r3, #8
 800605a:	d102      	bne.n	8006062 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800605c:	4b26      	ldr	r3, [pc, #152]	; (80060f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	e03e      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006062:	4b23      	ldr	r3, [pc, #140]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 030c 	and.w	r3, r3, #12
 800606a:	2b0c      	cmp	r3, #12
 800606c:	d136      	bne.n	80060dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800606e:	4b20      	ldr	r3, [pc, #128]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006078:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	091b      	lsrs	r3, r3, #4
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	3301      	adds	r3, #1
 8006084:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d10c      	bne.n	80060a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800608c:	4a1a      	ldr	r2, [pc, #104]	; (80060f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	4a16      	ldr	r2, [pc, #88]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006096:	68d2      	ldr	r2, [r2, #12]
 8006098:	0a12      	lsrs	r2, r2, #8
 800609a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800609e:	fb02 f303 	mul.w	r3, r2, r3
 80060a2:	617b      	str	r3, [r7, #20]
      break;
 80060a4:	e00c      	b.n	80060c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060a6:	4a13      	ldr	r2, [pc, #76]	; (80060f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ae:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060b0:	68d2      	ldr	r2, [r2, #12]
 80060b2:	0a12      	lsrs	r2, r2, #8
 80060b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060b8:	fb02 f303 	mul.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]
      break;
 80060be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	0e5b      	lsrs	r3, r3, #25
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	3301      	adds	r3, #1
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	e001      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80060e0:	693b      	ldr	r3, [r7, #16]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40021000 	.word	0x40021000
 80060f4:	00f42400 	.word	0x00f42400
 80060f8:	016e3600 	.word	0x016e3600

080060fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006100:	4b03      	ldr	r3, [pc, #12]	; (8006110 <HAL_RCC_GetHCLKFreq+0x14>)
 8006102:	681b      	ldr	r3, [r3, #0]
}
 8006104:	4618      	mov	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	2000002c 	.word	0x2000002c

08006114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006118:	f7ff fff0 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 800611c:	4602      	mov	r2, r0
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	0a1b      	lsrs	r3, r3, #8
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	4904      	ldr	r1, [pc, #16]	; (800613c <HAL_RCC_GetPCLK1Freq+0x28>)
 800612a:	5ccb      	ldrb	r3, [r1, r3]
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40021000 	.word	0x40021000
 800613c:	080072e8 	.word	0x080072e8

08006140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006144:	f7ff ffda 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 8006148:	4602      	mov	r2, r0
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	0adb      	lsrs	r3, r3, #11
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	4904      	ldr	r1, [pc, #16]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006156:	5ccb      	ldrb	r3, [r1, r3]
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006160:	4618      	mov	r0, r3
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40021000 	.word	0x40021000
 8006168:	080072e8 	.word	0x080072e8

0800616c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006172:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800617c:	4b1b      	ldr	r3, [pc, #108]	; (80061ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2b03      	cmp	r3, #3
 800618e:	d10c      	bne.n	80061aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006190:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	4a14      	ldr	r2, [pc, #80]	; (80061ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800619a:	68d2      	ldr	r2, [r2, #12]
 800619c:	0a12      	lsrs	r2, r2, #8
 800619e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	617b      	str	r3, [r7, #20]
    break;
 80061a8:	e00c      	b.n	80061c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061aa:	4a12      	ldr	r2, [pc, #72]	; (80061f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b2:	4a0e      	ldr	r2, [pc, #56]	; (80061ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061b4:	68d2      	ldr	r2, [r2, #12]
 80061b6:	0a12      	lsrs	r2, r2, #8
 80061b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061bc:	fb02 f303 	mul.w	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]
    break;
 80061c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	0e5b      	lsrs	r3, r3, #25
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	3301      	adds	r3, #1
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80061de:	687b      	ldr	r3, [r7, #4]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40021000 	.word	0x40021000
 80061f0:	016e3600 	.word	0x016e3600
 80061f4:	00f42400 	.word	0x00f42400

080061f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006200:	2300      	movs	r3, #0
 8006202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006204:	2300      	movs	r3, #0
 8006206:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8098 	beq.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006216:	2300      	movs	r3, #0
 8006218:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800621a:	4b43      	ldr	r3, [pc, #268]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800621c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10d      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006226:	4b40      	ldr	r3, [pc, #256]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	4a3f      	ldr	r2, [pc, #252]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006230:	6593      	str	r3, [r2, #88]	; 0x58
 8006232:	4b3d      	ldr	r3, [pc, #244]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623a:	60bb      	str	r3, [r7, #8]
 800623c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800623e:	2301      	movs	r3, #1
 8006240:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006242:	4b3a      	ldr	r3, [pc, #232]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a39      	ldr	r2, [pc, #228]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800624e:	f7fb fbdb 	bl	8001a08 <HAL_GetTick>
 8006252:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006254:	e009      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006256:	f7fb fbd7 	bl	8001a08 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d902      	bls.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	74fb      	strb	r3, [r7, #19]
        break;
 8006268:	e005      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800626a:	4b30      	ldr	r3, [pc, #192]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0ef      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006276:	7cfb      	ldrb	r3, [r7, #19]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d159      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800627c:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006286:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d01e      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	429a      	cmp	r2, r3
 8006296:	d019      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006298:	4b23      	ldr	r3, [pc, #140]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062a4:	4b20      	ldr	r3, [pc, #128]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062b4:	4b1c      	ldr	r3, [pc, #112]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ba:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062c4:	4a18      	ldr	r2, [pc, #96]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d6:	f7fb fb97 	bl	8001a08 <HAL_GetTick>
 80062da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062dc:	e00b      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062de:	f7fb fb93 	bl	8001a08 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d902      	bls.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	74fb      	strb	r3, [r7, #19]
            break;
 80062f4:	e006      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0ec      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006304:	7cfb      	ldrb	r3, [r7, #19]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10b      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800630a:	4b07      	ldr	r3, [pc, #28]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	4903      	ldr	r1, [pc, #12]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006320:	e008      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006322:	7cfb      	ldrb	r3, [r7, #19]
 8006324:	74bb      	strb	r3, [r7, #18]
 8006326:	e005      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006328:	40021000 	.word	0x40021000
 800632c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	7cfb      	ldrb	r3, [r7, #19]
 8006332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006334:	7c7b      	ldrb	r3, [r7, #17]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d105      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633a:	4baf      	ldr	r3, [pc, #700]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633e:	4aae      	ldr	r2, [pc, #696]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006352:	4ba9      	ldr	r3, [pc, #676]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006358:	f023 0203 	bic.w	r2, r3, #3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	49a5      	ldr	r1, [pc, #660]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006374:	4ba0      	ldr	r3, [pc, #640]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f023 020c 	bic.w	r2, r3, #12
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	499d      	ldr	r1, [pc, #628]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006396:	4b98      	ldr	r3, [pc, #608]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	4994      	ldr	r1, [pc, #592]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b8:	4b8f      	ldr	r3, [pc, #572]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	498c      	ldr	r1, [pc, #560]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063da:	4b87      	ldr	r3, [pc, #540]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	4983      	ldr	r1, [pc, #524]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063fc:	4b7e      	ldr	r3, [pc, #504]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	497b      	ldr	r1, [pc, #492]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800641e:	4b76      	ldr	r3, [pc, #472]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	4972      	ldr	r1, [pc, #456]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006440:	4b6d      	ldr	r3, [pc, #436]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	496a      	ldr	r1, [pc, #424]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006462:	4b65      	ldr	r3, [pc, #404]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	4961      	ldr	r1, [pc, #388]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006484:	4b5c      	ldr	r3, [pc, #368]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800648a:	f023 0203 	bic.w	r2, r3, #3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	4959      	ldr	r1, [pc, #356]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064a6:	4b54      	ldr	r3, [pc, #336]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	4950      	ldr	r1, [pc, #320]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d015      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064c8:	4b4b      	ldr	r3, [pc, #300]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	4948      	ldr	r1, [pc, #288]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e6:	d105      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064e8:	4b43      	ldr	r3, [pc, #268]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a42      	ldr	r2, [pc, #264]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d015      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006500:	4b3d      	ldr	r3, [pc, #244]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650e:	493a      	ldr	r1, [pc, #232]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006510:	4313      	orrs	r3, r2
 8006512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800651e:	d105      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006520:	4b35      	ldr	r3, [pc, #212]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	4a34      	ldr	r2, [pc, #208]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800652a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d015      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006538:	4b2f      	ldr	r3, [pc, #188]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	492c      	ldr	r1, [pc, #176]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006556:	d105      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006558:	4b27      	ldr	r3, [pc, #156]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4a26      	ldr	r2, [pc, #152]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800655e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006562:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006570:	4b21      	ldr	r3, [pc, #132]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	491e      	ldr	r1, [pc, #120]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800658e:	d105      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006590:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4a18      	ldr	r2, [pc, #96]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800659a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d015      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065a8:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	4910      	ldr	r1, [pc, #64]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065c6:	d105      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4a0a      	ldr	r2, [pc, #40]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d018      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ee:	4902      	ldr	r1, [pc, #8]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80065f6:	e001      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80065f8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006604:	d105      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006606:	4b21      	ldr	r3, [pc, #132]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	4a20      	ldr	r2, [pc, #128]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800660c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006610:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d015      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800661e:	4b1b      	ldr	r3, [pc, #108]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006624:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662c:	4917      	ldr	r1, [pc, #92]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663c:	d105      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	4a12      	ldr	r2, [pc, #72]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006648:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d015      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006656:	4b0d      	ldr	r3, [pc, #52]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006664:	4909      	ldr	r1, [pc, #36]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006674:	d105      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	4a04      	ldr	r2, [pc, #16]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800667c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006680:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006682:	7cbb      	ldrb	r3, [r7, #18]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40021000 	.word	0x40021000

08006690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e042      	b.n	8006728 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fb f871 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2224      	movs	r2, #36	; 0x24
 80066be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f82c 	bl	8006730 <UART_SetConfig>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e022      	b.n	8006728 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 faf0 	bl	8006cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800670e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fb77 	bl	8006e14 <UART_CheckIdleState>
 8006726:	4603      	mov	r3, r0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006730:	b5b0      	push	{r4, r5, r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	4313      	orrs	r3, r2
 8006752:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	4313      	orrs	r3, r2
 800675c:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4bb1      	ldr	r3, [pc, #708]	; (8006a2c <UART_SetConfig+0x2fc>)
 8006766:	4013      	ands	r3, r2
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	69f9      	ldr	r1, [r7, #28]
 800676e:	430b      	orrs	r3, r1
 8006770:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4aa7      	ldr	r2, [pc, #668]	; (8006a30 <UART_SetConfig+0x300>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	4313      	orrs	r3, r2
 80067a0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80067ac:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	69f9      	ldr	r1, [r7, #28]
 80067b6:	430b      	orrs	r3, r1
 80067b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	f023 010f 	bic.w	r1, r3, #15
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a97      	ldr	r2, [pc, #604]	; (8006a34 <UART_SetConfig+0x304>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d121      	bne.n	800681e <UART_SetConfig+0xee>
 80067da:	4b97      	ldr	r3, [pc, #604]	; (8006a38 <UART_SetConfig+0x308>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d817      	bhi.n	8006818 <UART_SetConfig+0xe8>
 80067e8:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <UART_SetConfig+0xc0>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006801 	.word	0x08006801
 80067f4:	0800680d 	.word	0x0800680d
 80067f8:	08006807 	.word	0x08006807
 80067fc:	08006813 	.word	0x08006813
 8006800:	2301      	movs	r3, #1
 8006802:	76fb      	strb	r3, [r7, #27]
 8006804:	e0e7      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006806:	2302      	movs	r3, #2
 8006808:	76fb      	strb	r3, [r7, #27]
 800680a:	e0e4      	b.n	80069d6 <UART_SetConfig+0x2a6>
 800680c:	2304      	movs	r3, #4
 800680e:	76fb      	strb	r3, [r7, #27]
 8006810:	e0e1      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006812:	2308      	movs	r3, #8
 8006814:	76fb      	strb	r3, [r7, #27]
 8006816:	e0de      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006818:	2310      	movs	r3, #16
 800681a:	76fb      	strb	r3, [r7, #27]
 800681c:	e0db      	b.n	80069d6 <UART_SetConfig+0x2a6>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a86      	ldr	r2, [pc, #536]	; (8006a3c <UART_SetConfig+0x30c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d132      	bne.n	800688e <UART_SetConfig+0x15e>
 8006828:	4b83      	ldr	r3, [pc, #524]	; (8006a38 <UART_SetConfig+0x308>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	f003 030c 	and.w	r3, r3, #12
 8006832:	2b0c      	cmp	r3, #12
 8006834:	d828      	bhi.n	8006888 <UART_SetConfig+0x158>
 8006836:	a201      	add	r2, pc, #4	; (adr r2, 800683c <UART_SetConfig+0x10c>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	08006871 	.word	0x08006871
 8006840:	08006889 	.word	0x08006889
 8006844:	08006889 	.word	0x08006889
 8006848:	08006889 	.word	0x08006889
 800684c:	0800687d 	.word	0x0800687d
 8006850:	08006889 	.word	0x08006889
 8006854:	08006889 	.word	0x08006889
 8006858:	08006889 	.word	0x08006889
 800685c:	08006877 	.word	0x08006877
 8006860:	08006889 	.word	0x08006889
 8006864:	08006889 	.word	0x08006889
 8006868:	08006889 	.word	0x08006889
 800686c:	08006883 	.word	0x08006883
 8006870:	2300      	movs	r3, #0
 8006872:	76fb      	strb	r3, [r7, #27]
 8006874:	e0af      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006876:	2302      	movs	r3, #2
 8006878:	76fb      	strb	r3, [r7, #27]
 800687a:	e0ac      	b.n	80069d6 <UART_SetConfig+0x2a6>
 800687c:	2304      	movs	r3, #4
 800687e:	76fb      	strb	r3, [r7, #27]
 8006880:	e0a9      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006882:	2308      	movs	r3, #8
 8006884:	76fb      	strb	r3, [r7, #27]
 8006886:	e0a6      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006888:	2310      	movs	r3, #16
 800688a:	76fb      	strb	r3, [r7, #27]
 800688c:	e0a3      	b.n	80069d6 <UART_SetConfig+0x2a6>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a6b      	ldr	r2, [pc, #428]	; (8006a40 <UART_SetConfig+0x310>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d120      	bne.n	80068da <UART_SetConfig+0x1aa>
 8006898:	4b67      	ldr	r3, [pc, #412]	; (8006a38 <UART_SetConfig+0x308>)
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068a2:	2b30      	cmp	r3, #48	; 0x30
 80068a4:	d013      	beq.n	80068ce <UART_SetConfig+0x19e>
 80068a6:	2b30      	cmp	r3, #48	; 0x30
 80068a8:	d814      	bhi.n	80068d4 <UART_SetConfig+0x1a4>
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d009      	beq.n	80068c2 <UART_SetConfig+0x192>
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	d810      	bhi.n	80068d4 <UART_SetConfig+0x1a4>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <UART_SetConfig+0x18c>
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d006      	beq.n	80068c8 <UART_SetConfig+0x198>
 80068ba:	e00b      	b.n	80068d4 <UART_SetConfig+0x1a4>
 80068bc:	2300      	movs	r3, #0
 80068be:	76fb      	strb	r3, [r7, #27]
 80068c0:	e089      	b.n	80069d6 <UART_SetConfig+0x2a6>
 80068c2:	2302      	movs	r3, #2
 80068c4:	76fb      	strb	r3, [r7, #27]
 80068c6:	e086      	b.n	80069d6 <UART_SetConfig+0x2a6>
 80068c8:	2304      	movs	r3, #4
 80068ca:	76fb      	strb	r3, [r7, #27]
 80068cc:	e083      	b.n	80069d6 <UART_SetConfig+0x2a6>
 80068ce:	2308      	movs	r3, #8
 80068d0:	76fb      	strb	r3, [r7, #27]
 80068d2:	e080      	b.n	80069d6 <UART_SetConfig+0x2a6>
 80068d4:	2310      	movs	r3, #16
 80068d6:	76fb      	strb	r3, [r7, #27]
 80068d8:	e07d      	b.n	80069d6 <UART_SetConfig+0x2a6>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a59      	ldr	r2, [pc, #356]	; (8006a44 <UART_SetConfig+0x314>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d120      	bne.n	8006926 <UART_SetConfig+0x1f6>
 80068e4:	4b54      	ldr	r3, [pc, #336]	; (8006a38 <UART_SetConfig+0x308>)
 80068e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068ee:	2bc0      	cmp	r3, #192	; 0xc0
 80068f0:	d013      	beq.n	800691a <UART_SetConfig+0x1ea>
 80068f2:	2bc0      	cmp	r3, #192	; 0xc0
 80068f4:	d814      	bhi.n	8006920 <UART_SetConfig+0x1f0>
 80068f6:	2b80      	cmp	r3, #128	; 0x80
 80068f8:	d009      	beq.n	800690e <UART_SetConfig+0x1de>
 80068fa:	2b80      	cmp	r3, #128	; 0x80
 80068fc:	d810      	bhi.n	8006920 <UART_SetConfig+0x1f0>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <UART_SetConfig+0x1d8>
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	d006      	beq.n	8006914 <UART_SetConfig+0x1e4>
 8006906:	e00b      	b.n	8006920 <UART_SetConfig+0x1f0>
 8006908:	2300      	movs	r3, #0
 800690a:	76fb      	strb	r3, [r7, #27]
 800690c:	e063      	b.n	80069d6 <UART_SetConfig+0x2a6>
 800690e:	2302      	movs	r3, #2
 8006910:	76fb      	strb	r3, [r7, #27]
 8006912:	e060      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006914:	2304      	movs	r3, #4
 8006916:	76fb      	strb	r3, [r7, #27]
 8006918:	e05d      	b.n	80069d6 <UART_SetConfig+0x2a6>
 800691a:	2308      	movs	r3, #8
 800691c:	76fb      	strb	r3, [r7, #27]
 800691e:	e05a      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006920:	2310      	movs	r3, #16
 8006922:	76fb      	strb	r3, [r7, #27]
 8006924:	e057      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a47      	ldr	r2, [pc, #284]	; (8006a48 <UART_SetConfig+0x318>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d125      	bne.n	800697c <UART_SetConfig+0x24c>
 8006930:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <UART_SetConfig+0x308>)
 8006932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800693e:	d017      	beq.n	8006970 <UART_SetConfig+0x240>
 8006940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006944:	d817      	bhi.n	8006976 <UART_SetConfig+0x246>
 8006946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800694a:	d00b      	beq.n	8006964 <UART_SetConfig+0x234>
 800694c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006950:	d811      	bhi.n	8006976 <UART_SetConfig+0x246>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <UART_SetConfig+0x22e>
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	d006      	beq.n	800696a <UART_SetConfig+0x23a>
 800695c:	e00b      	b.n	8006976 <UART_SetConfig+0x246>
 800695e:	2300      	movs	r3, #0
 8006960:	76fb      	strb	r3, [r7, #27]
 8006962:	e038      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006964:	2302      	movs	r3, #2
 8006966:	76fb      	strb	r3, [r7, #27]
 8006968:	e035      	b.n	80069d6 <UART_SetConfig+0x2a6>
 800696a:	2304      	movs	r3, #4
 800696c:	76fb      	strb	r3, [r7, #27]
 800696e:	e032      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006970:	2308      	movs	r3, #8
 8006972:	76fb      	strb	r3, [r7, #27]
 8006974:	e02f      	b.n	80069d6 <UART_SetConfig+0x2a6>
 8006976:	2310      	movs	r3, #16
 8006978:	76fb      	strb	r3, [r7, #27]
 800697a:	e02c      	b.n	80069d6 <UART_SetConfig+0x2a6>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a2b      	ldr	r2, [pc, #172]	; (8006a30 <UART_SetConfig+0x300>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d125      	bne.n	80069d2 <UART_SetConfig+0x2a2>
 8006986:	4b2c      	ldr	r3, [pc, #176]	; (8006a38 <UART_SetConfig+0x308>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006994:	d017      	beq.n	80069c6 <UART_SetConfig+0x296>
 8006996:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800699a:	d817      	bhi.n	80069cc <UART_SetConfig+0x29c>
 800699c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a0:	d00b      	beq.n	80069ba <UART_SetConfig+0x28a>
 80069a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a6:	d811      	bhi.n	80069cc <UART_SetConfig+0x29c>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <UART_SetConfig+0x284>
 80069ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b0:	d006      	beq.n	80069c0 <UART_SetConfig+0x290>
 80069b2:	e00b      	b.n	80069cc <UART_SetConfig+0x29c>
 80069b4:	2300      	movs	r3, #0
 80069b6:	76fb      	strb	r3, [r7, #27]
 80069b8:	e00d      	b.n	80069d6 <UART_SetConfig+0x2a6>
 80069ba:	2302      	movs	r3, #2
 80069bc:	76fb      	strb	r3, [r7, #27]
 80069be:	e00a      	b.n	80069d6 <UART_SetConfig+0x2a6>
 80069c0:	2304      	movs	r3, #4
 80069c2:	76fb      	strb	r3, [r7, #27]
 80069c4:	e007      	b.n	80069d6 <UART_SetConfig+0x2a6>
 80069c6:	2308      	movs	r3, #8
 80069c8:	76fb      	strb	r3, [r7, #27]
 80069ca:	e004      	b.n	80069d6 <UART_SetConfig+0x2a6>
 80069cc:	2310      	movs	r3, #16
 80069ce:	76fb      	strb	r3, [r7, #27]
 80069d0:	e001      	b.n	80069d6 <UART_SetConfig+0x2a6>
 80069d2:	2310      	movs	r3, #16
 80069d4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <UART_SetConfig+0x300>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	f040 809f 	bne.w	8006b20 <UART_SetConfig+0x3f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069e2:	7efb      	ldrb	r3, [r7, #27]
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d837      	bhi.n	8006a58 <UART_SetConfig+0x328>
 80069e8:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <UART_SetConfig+0x2c0>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a59 	.word	0x08006a59
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a59 	.word	0x08006a59
 8006a00:	08006a23 	.word	0x08006a23
 8006a04:	08006a59 	.word	0x08006a59
 8006a08:	08006a59 	.word	0x08006a59
 8006a0c:	08006a59 	.word	0x08006a59
 8006a10:	08006a51 	.word	0x08006a51
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a14:	f7ff fb7e 	bl	8006114 <HAL_RCC_GetPCLK1Freq>
 8006a18:	6178      	str	r0, [r7, #20]
        break;
 8006a1a:	e022      	b.n	8006a62 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <UART_SetConfig+0x31c>)
 8006a1e:	617b      	str	r3, [r7, #20]
        break;
 8006a20:	e01f      	b.n	8006a62 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a22:	f7ff fb09 	bl	8006038 <HAL_RCC_GetSysClockFreq>
 8006a26:	6178      	str	r0, [r7, #20]
        break;
 8006a28:	e01b      	b.n	8006a62 <UART_SetConfig+0x332>
 8006a2a:	bf00      	nop
 8006a2c:	cfff69f3 	.word	0xcfff69f3
 8006a30:	40008000 	.word	0x40008000
 8006a34:	40013800 	.word	0x40013800
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40004400 	.word	0x40004400
 8006a40:	40004800 	.word	0x40004800
 8006a44:	40004c00 	.word	0x40004c00
 8006a48:	40005000 	.word	0x40005000
 8006a4c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a54:	617b      	str	r3, [r7, #20]
        break;
 8006a56:	e004      	b.n	8006a62 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	76bb      	strb	r3, [r7, #26]
        break;
 8006a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 811b 	beq.w	8006ca0 <UART_SetConfig+0x570>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	4a96      	ldr	r2, [pc, #600]	; (8006cc8 <UART_SetConfig+0x598>)
 8006a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a74:	461a      	mov	r2, r3
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a7c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	4413      	add	r3, r2
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d305      	bcc.n	8006a9a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d902      	bls.n	8006aa0 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	76bb      	strb	r3, [r7, #26]
 8006a9e:	e0ff      	b.n	8006ca0 <UART_SetConfig+0x570>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f04f 0100 	mov.w	r1, #0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	4a86      	ldr	r2, [pc, #536]	; (8006cc8 <UART_SetConfig+0x598>)
 8006aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	f7f9 fbae 	bl	8000218 <__aeabi_uldivmod>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	020b      	lsls	r3, r1, #8
 8006ace:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ad2:	0202      	lsls	r2, r0, #8
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	6849      	ldr	r1, [r1, #4]
 8006ad8:	0849      	lsrs	r1, r1, #1
 8006ada:	4608      	mov	r0, r1
 8006adc:	f04f 0100 	mov.w	r1, #0
 8006ae0:	1814      	adds	r4, r2, r0
 8006ae2:	eb43 0501 	adc.w	r5, r3, r1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f04f 0300 	mov.w	r3, #0
 8006af0:	4620      	mov	r0, r4
 8006af2:	4629      	mov	r1, r5
 8006af4:	f7f9 fb90 	bl	8000218 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4613      	mov	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b06:	d308      	bcc.n	8006b1a <UART_SetConfig+0x3ea>
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b0e:	d204      	bcs.n	8006b1a <UART_SetConfig+0x3ea>
        {
          huart->Instance->BRR = usartdiv;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	e0c2      	b.n	8006ca0 <UART_SetConfig+0x570>
        }
        else
        {
          ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	76bb      	strb	r3, [r7, #26]
 8006b1e:	e0bf      	b.n	8006ca0 <UART_SetConfig+0x570>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b28:	d165      	bne.n	8006bf6 <UART_SetConfig+0x4c6>
  {
    switch (clocksource)
 8006b2a:	7efb      	ldrb	r3, [r7, #27]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d828      	bhi.n	8006b82 <UART_SetConfig+0x452>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x408>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	08006b83 	.word	0x08006b83
 8006b48:	08006b73 	.word	0x08006b73
 8006b4c:	08006b83 	.word	0x08006b83
 8006b50:	08006b83 	.word	0x08006b83
 8006b54:	08006b83 	.word	0x08006b83
 8006b58:	08006b7b 	.word	0x08006b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b5c:	f7ff fada 	bl	8006114 <HAL_RCC_GetPCLK1Freq>
 8006b60:	6178      	str	r0, [r7, #20]
        break;
 8006b62:	e013      	b.n	8006b8c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b64:	f7ff faec 	bl	8006140 <HAL_RCC_GetPCLK2Freq>
 8006b68:	6178      	str	r0, [r7, #20]
        break;
 8006b6a:	e00f      	b.n	8006b8c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b6c:	4b57      	ldr	r3, [pc, #348]	; (8006ccc <UART_SetConfig+0x59c>)
 8006b6e:	617b      	str	r3, [r7, #20]
        break;
 8006b70:	e00c      	b.n	8006b8c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b72:	f7ff fa61 	bl	8006038 <HAL_RCC_GetSysClockFreq>
 8006b76:	6178      	str	r0, [r7, #20]
        break;
 8006b78:	e008      	b.n	8006b8c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7e:	617b      	str	r3, [r7, #20]
        break;
 8006b80:	e004      	b.n	8006b8c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	76bb      	strb	r3, [r7, #26]
        break;
 8006b8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 8086 	beq.w	8006ca0 <UART_SetConfig+0x570>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	4a4b      	ldr	r2, [pc, #300]	; (8006cc8 <UART_SetConfig+0x598>)
 8006b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ba6:	005a      	lsls	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	441a      	add	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b0f      	cmp	r3, #15
 8006bc0:	d916      	bls.n	8006bf0 <UART_SetConfig+0x4c0>
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc8:	d212      	bcs.n	8006bf0 <UART_SetConfig+0x4c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f023 030f 	bic.w	r3, r3, #15
 8006bd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	89fb      	ldrh	r3, [r7, #14]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	89fa      	ldrh	r2, [r7, #14]
 8006bec:	60da      	str	r2, [r3, #12]
 8006bee:	e057      	b.n	8006ca0 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	76bb      	strb	r3, [r7, #26]
 8006bf4:	e054      	b.n	8006ca0 <UART_SetConfig+0x570>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bf6:	7efb      	ldrb	r3, [r7, #27]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d828      	bhi.n	8006c4e <UART_SetConfig+0x51e>
 8006bfc:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <UART_SetConfig+0x4d4>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c29 	.word	0x08006c29
 8006c08:	08006c31 	.word	0x08006c31
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	08006c4f 	.word	0x08006c4f
 8006c14:	08006c3f 	.word	0x08006c3f
 8006c18:	08006c4f 	.word	0x08006c4f
 8006c1c:	08006c4f 	.word	0x08006c4f
 8006c20:	08006c4f 	.word	0x08006c4f
 8006c24:	08006c47 	.word	0x08006c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c28:	f7ff fa74 	bl	8006114 <HAL_RCC_GetPCLK1Freq>
 8006c2c:	6178      	str	r0, [r7, #20]
        break;
 8006c2e:	e013      	b.n	8006c58 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c30:	f7ff fa86 	bl	8006140 <HAL_RCC_GetPCLK2Freq>
 8006c34:	6178      	str	r0, [r7, #20]
        break;
 8006c36:	e00f      	b.n	8006c58 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c38:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <UART_SetConfig+0x59c>)
 8006c3a:	617b      	str	r3, [r7, #20]
        break;
 8006c3c:	e00c      	b.n	8006c58 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3e:	f7ff f9fb 	bl	8006038 <HAL_RCC_GetSysClockFreq>
 8006c42:	6178      	str	r0, [r7, #20]
        break;
 8006c44:	e008      	b.n	8006c58 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4a:	617b      	str	r3, [r7, #20]
        break;
 8006c4c:	e004      	b.n	8006c58 <UART_SetConfig+0x528>
      default:
        pclk = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	76bb      	strb	r3, [r7, #26]
        break;
 8006c56:	bf00      	nop
    }

    if (pclk != 0U)
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d020      	beq.n	8006ca0 <UART_SetConfig+0x570>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	4a19      	ldr	r2, [pc, #100]	; (8006cc8 <UART_SetConfig+0x598>)
 8006c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	085b      	lsrs	r3, r3, #1
 8006c76:	441a      	add	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b0f      	cmp	r3, #15
 8006c88:	d908      	bls.n	8006c9c <UART_SetConfig+0x56c>
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c90:	d204      	bcs.n	8006c9c <UART_SetConfig+0x56c>
      {
        huart->Instance->BRR = usartdiv;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	60da      	str	r2, [r3, #12]
 8006c9a:	e001      	b.n	8006ca0 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006cbc:	7ebb      	ldrb	r3, [r7, #26]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3720      	adds	r7, #32
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	080072f0 	.word	0x080072f0
 8006ccc:	00f42400 	.word	0x00f42400

08006cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01a      	beq.n	8006de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dce:	d10a      	bne.n	8006de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e24:	f7fa fdf0 	bl	8001a08 <HAL_GetTick>
 8006e28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d10e      	bne.n	8006e56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f82c 	bl	8006ea4 <UART_WaitOnFlagUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e022      	b.n	8006e9c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d10e      	bne.n	8006e82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f816 	bl	8006ea4 <UART_WaitOnFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e00c      	b.n	8006e9c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb4:	e062      	b.n	8006f7c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebc:	d05e      	beq.n	8006f7c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ebe:	f7fa fda3 	bl	8001a08 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d302      	bcc.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d11d      	bne.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ee2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0201 	bic.w	r2, r2, #1
 8006ef2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e045      	b.n	8006f9c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d02e      	beq.n	8006f7c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2c:	d126      	bne.n	8006f7c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f36:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f46:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0201 	bic.w	r2, r2, #1
 8006f56:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e00f      	b.n	8006f9c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4013      	ands	r3, r2
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d08d      	beq.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_UARTEx_DisableFifoMode+0x16>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e027      	b.n	800700a <HAL_UARTEx_DisableFifoMode+0x66>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2224      	movs	r2, #36	; 0x24
 8006fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0201 	bic.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800702a:	2302      	movs	r3, #2
 800702c:	e02d      	b.n	800708a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2224      	movs	r2, #36	; 0x24
 800703a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f850 	bl	8007110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e02d      	b.n	8007106 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2224      	movs	r2, #36	; 0x24
 80070b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0201 	bic.w	r2, r2, #1
 80070d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f812 	bl	8007110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b089      	sub	sp, #36	; 0x24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007118:	4a2f      	ldr	r2, [pc, #188]	; (80071d8 <UARTEx_SetNbDataToProcess+0xc8>)
 800711a:	f107 0314 	add.w	r3, r7, #20
 800711e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007122:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007126:	4a2d      	ldr	r2, [pc, #180]	; (80071dc <UARTEx_SetNbDataToProcess+0xcc>)
 8007128:	f107 030c 	add.w	r3, r7, #12
 800712c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007130:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007138:	2b00      	cmp	r3, #0
 800713a:	d108      	bne.n	800714e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800714c:	e03d      	b.n	80071ca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800714e:	2308      	movs	r3, #8
 8007150:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007152:	2308      	movs	r3, #8
 8007154:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	0e5b      	lsrs	r3, r3, #25
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f003 0307 	and.w	r3, r3, #7
 8007164:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	0f5b      	lsrs	r3, r3, #29
 800716e:	b2db      	uxtb	r3, r3
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007176:	7fbb      	ldrb	r3, [r7, #30]
 8007178:	7f3a      	ldrb	r2, [r7, #28]
 800717a:	f107 0120 	add.w	r1, r7, #32
 800717e:	440a      	add	r2, r1
 8007180:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007188:	7f3a      	ldrb	r2, [r7, #28]
 800718a:	f107 0120 	add.w	r1, r7, #32
 800718e:	440a      	add	r2, r1
 8007190:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007194:	fb93 f3f2 	sdiv	r3, r3, r2
 8007198:	b29a      	uxth	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071a0:	7ffb      	ldrb	r3, [r7, #31]
 80071a2:	7f7a      	ldrb	r2, [r7, #29]
 80071a4:	f107 0120 	add.w	r1, r7, #32
 80071a8:	440a      	add	r2, r1
 80071aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80071ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071b2:	7f7a      	ldrb	r2, [r7, #29]
 80071b4:	f107 0120 	add.w	r1, r7, #32
 80071b8:	440a      	add	r2, r1
 80071ba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071be:	fb93 f3f2 	sdiv	r3, r3, r2
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80071ca:	bf00      	nop
 80071cc:	3724      	adds	r7, #36	; 0x24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	080072c8 	.word	0x080072c8
 80071dc:	080072d0 	.word	0x080072d0

080071e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80071e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80071ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	43db      	mvns	r3, r3
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	4013      	ands	r3, r2
 8007200:	b29a      	uxth	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007216:	b084      	sub	sp, #16
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	f107 0014 	add.w	r0, r7, #20
 8007224:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	b004      	add	sp, #16
 8007256:	4770      	bx	lr

08007258 <__libc_init_array>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	4d0d      	ldr	r5, [pc, #52]	; (8007290 <__libc_init_array+0x38>)
 800725c:	4c0d      	ldr	r4, [pc, #52]	; (8007294 <__libc_init_array+0x3c>)
 800725e:	1b64      	subs	r4, r4, r5
 8007260:	10a4      	asrs	r4, r4, #2
 8007262:	2600      	movs	r6, #0
 8007264:	42a6      	cmp	r6, r4
 8007266:	d109      	bne.n	800727c <__libc_init_array+0x24>
 8007268:	4d0b      	ldr	r5, [pc, #44]	; (8007298 <__libc_init_array+0x40>)
 800726a:	4c0c      	ldr	r4, [pc, #48]	; (800729c <__libc_init_array+0x44>)
 800726c:	f000 f820 	bl	80072b0 <_init>
 8007270:	1b64      	subs	r4, r4, r5
 8007272:	10a4      	asrs	r4, r4, #2
 8007274:	2600      	movs	r6, #0
 8007276:	42a6      	cmp	r6, r4
 8007278:	d105      	bne.n	8007286 <__libc_init_array+0x2e>
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007280:	4798      	blx	r3
 8007282:	3601      	adds	r6, #1
 8007284:	e7ee      	b.n	8007264 <__libc_init_array+0xc>
 8007286:	f855 3b04 	ldr.w	r3, [r5], #4
 800728a:	4798      	blx	r3
 800728c:	3601      	adds	r6, #1
 800728e:	e7f2      	b.n	8007276 <__libc_init_array+0x1e>
 8007290:	08007310 	.word	0x08007310
 8007294:	08007310 	.word	0x08007310
 8007298:	08007310 	.word	0x08007310
 800729c:	08007314 	.word	0x08007314

080072a0 <memset>:
 80072a0:	4402      	add	r2, r0
 80072a2:	4603      	mov	r3, r0
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d100      	bne.n	80072aa <memset+0xa>
 80072a8:	4770      	bx	lr
 80072aa:	f803 1b01 	strb.w	r1, [r3], #1
 80072ae:	e7f9      	b.n	80072a4 <memset+0x4>

080072b0 <_init>:
 80072b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b2:	bf00      	nop
 80072b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b6:	bc08      	pop	{r3}
 80072b8:	469e      	mov	lr, r3
 80072ba:	4770      	bx	lr

080072bc <_fini>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	bf00      	nop
 80072c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c2:	bc08      	pop	{r3}
 80072c4:	469e      	mov	lr, r3
 80072c6:	4770      	bx	lr
